{"ast":null,"code":"var _jsxFileName = \"/home/shefaa/Public/Courses/React/Ibtikar task/01-starting-project (1)/01-starting-project/src/components/Auth/RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AuthContext from \"../../store/auth-context\";\nimport \"react-phone-number-input/style.css\";\nimport { isValidPhoneNumber } from \"react-phone-number-input\";\nimport PhoneInput from \"react-phone-number-input\";\nimport classes from \"./AuthForm.module.css\";\nimport useBasicInput from \"../hooks/use-basic-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RegisterForm = () => {\n  _s();\n\n  const history = useHistory();\n\n  const validatePhoneNumber = number => {\n    if (number.length < 5) {\n      return false;\n    } else {\n      return isValidPhoneNumber(number);\n    }\n  };\n\n  const validateEmail = email => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  };\n\n  const {\n    value: enteredEmail,\n    enteredValueIsValid: emailIsValid,\n    valueHasError: emailHasError,\n    valueChangehandler: emailChangehandler,\n    valueBlurHandler: emailBlurHandler,\n    reset: emailReset\n  } = useBasicInput(validateEmail);\n  const {\n    value: enteredName,\n    enteredValueIsValid: nameIsValid,\n    valueHasError: nameHasError,\n    valueChangehandler: nameChangehandler,\n    valueBlurHandler: nameBlurHandler,\n    reset: nameReset\n  } = useBasicInput(value => value.trim() !== \"\");\n  const {\n    value: enteredMobileNumber,\n    enteredValueIsValid: mobileNumberIsValid,\n    valueHasError: mobileNumberHasError,\n    valueChangehandler: mobileNumberChangehandler,\n    valueBlurHandler: mobileNumberBlurHandler,\n    reset: mobileNumberReset\n  } = useBasicInput(validatePhoneNumber);\n  const {\n    value: enteredPassword,\n    enteredValueIsValid: passwordIsValid,\n    valueHasError: passwordHasError,\n    valueChangehandler: passwordChangehandler,\n    valueBlurHandler: passwordBlurHandler,\n    reset: passwordReset\n  } = useBasicInput(value => !(value.length < 8));\n  const {\n    value: enteredPasswordConfirmation,\n    enteredValueIsValid: passwordConfirmationIsValid,\n    valueHasError: passwordConfirmationHasError,\n    valueChangehandler: passwordConfirmationChangehandler,\n    valueBlurHandler: passwordConfirmationBlurHandler,\n    reset: passwordConfirmationReset\n  } = useBasicInput(value => value === enteredPassword);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const submitHandler = event => {\n    event.preventDefault();\n    setIsLoading(true);\n    const url = \"https://boiler-stage.ibtikar.sa/api/v1/users\";\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        name: enteredName,\n        password_confirmation: enteredPasswordConfirmation,\n        mobile_number: enteredMobileNumber,\n        returnSecureToken: true\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      setIsLoading(false);\n\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          console.log(data);\n          let errorMessage = \"Authentication failed!\";\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      console.log(\"pushed\");\n      history.push(\"/login\");\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${nameHasError ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          required: true,\n          value: enteredName,\n          onChange: nameChangehandler,\n          onBlur: nameBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), nameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.error,\n          children: \"Name is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailHasError ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          required: true,\n          value: enteredEmail,\n          onChange: emailChangehandler,\n          onBlur: emailBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), emailHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.error,\n          children: \"Email format is invalid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${mobileNumberHasError ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"mobile_number\",\n          children: \"Mobile number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PhoneInput, {\n          name: \"mobile_number\",\n          id: \"mobile_number\",\n          international: true,\n          defaultCountry: \"EG\",\n          required: true,\n          value: enteredMobileNumber,\n          onChange: mobileNumberChangehandler,\n          onBlur: mobileNumberBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), mobileNumberHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.error,\n          children: \"Invalid mobile number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordHasError ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          required: true,\n          onChange: passwordChangehandler,\n          onBlur: passwordBlurHandler,\n          value: enteredPassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), passwordHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.error,\n          children: \"Password must be at least 8 characters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordConfirmationHasError ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password_confirmation\",\n          children: \"Password confirmation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password_confirmation\",\n          required: true,\n          value: enteredPasswordConfirmation,\n          onChange: passwordConfirmationChangehandler,\n          onBlur: passwordConfirmationBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), passwordConfirmationHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.error,\n          children: \"Password confirmation doesn't match\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 26\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" Laoding... \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterForm, \"iJN0TNcxJ6ZamtlnK5hqrC6maOQ=\", false, function () {\n  return [useHistory, useBasicInput, useBasicInput, useBasicInput, useBasicInput, useBasicInput];\n});\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["/home/shefaa/Public/Courses/React/Ibtikar task/01-starting-project (1)/01-starting-project/src/components/Auth/RegisterForm.js"],"names":["useContext","useRef","useState","useHistory","AuthContext","isValidPhoneNumber","PhoneInput","classes","useBasicInput","RegisterForm","history","validatePhoneNumber","number","length","validateEmail","email","re","test","String","toLowerCase","value","enteredEmail","enteredValueIsValid","emailIsValid","valueHasError","emailHasError","valueChangehandler","emailChangehandler","valueBlurHandler","emailBlurHandler","reset","emailReset","enteredName","nameIsValid","nameHasError","nameChangehandler","nameBlurHandler","nameReset","trim","enteredMobileNumber","mobileNumberIsValid","mobileNumberHasError","mobileNumberChangehandler","mobileNumberBlurHandler","mobileNumberReset","enteredPassword","passwordIsValid","passwordHasError","passwordChangehandler","passwordBlurHandler","passwordReset","enteredPasswordConfirmation","passwordConfirmationIsValid","passwordConfirmationHasError","passwordConfirmationChangehandler","passwordConfirmationBlurHandler","passwordConfirmationReset","isLoading","setIsLoading","submitHandler","event","preventDefault","url","fetch","method","body","JSON","stringify","password","name","password_confirmation","mobile_number","returnSecureToken","headers","then","res","ok","json","data","console","log","errorMessage","Error","push","catch","err","alert","message","auth","control","invalid","error","actions"],"mappings":"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","sourcesContent":["import { useContext, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AuthContext from \"../../store/auth-context\";\nimport \"react-phone-number-input/style.css\";\nimport { isValidPhoneNumber } from \"react-phone-number-input\";\nimport PhoneInput from \"react-phone-number-input\";\nimport classes from \"./AuthForm.module.css\";\nimport useBasicInput from \"../hooks/use-basic-input\";\n\nconst RegisterForm = () => {\n  const history = useHistory();\n\n  const validatePhoneNumber = (number) => {\n    if (number.length < 5) {\n      return false;\n    } else {\n      return isValidPhoneNumber(number);\n    }\n  };\n\n  const validateEmail = (email) => {\n    const re =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  };\n\n  const {\n    value: enteredEmail,\n    enteredValueIsValid: emailIsValid,\n    valueHasError: emailHasError,\n    valueChangehandler: emailChangehandler,\n    valueBlurHandler: emailBlurHandler,\n    reset: emailReset,\n  } = useBasicInput(validateEmail);\n\n  const {\n    value: enteredName,\n    enteredValueIsValid: nameIsValid,\n    valueHasError: nameHasError,\n    valueChangehandler: nameChangehandler,\n    valueBlurHandler: nameBlurHandler,\n    reset: nameReset,\n  } = useBasicInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredMobileNumber,\n    enteredValueIsValid: mobileNumberIsValid,\n    valueHasError: mobileNumberHasError,\n    valueChangehandler: mobileNumberChangehandler,\n    valueBlurHandler: mobileNumberBlurHandler,\n    reset: mobileNumberReset,\n  } = useBasicInput(validatePhoneNumber);\n\n  const {\n    value: enteredPassword,\n    enteredValueIsValid: passwordIsValid,\n    valueHasError: passwordHasError,\n    valueChangehandler: passwordChangehandler,\n    valueBlurHandler: passwordBlurHandler,\n    reset: passwordReset,\n  } = useBasicInput((value) => !(value.length < 8));\n\n  const {\n    value: enteredPasswordConfirmation,\n    enteredValueIsValid: passwordConfirmationIsValid,\n    valueHasError: passwordConfirmationHasError,\n    valueChangehandler: passwordConfirmationChangehandler,\n    valueBlurHandler: passwordConfirmationBlurHandler,\n    reset: passwordConfirmationReset,\n  } = useBasicInput((value) => value === enteredPassword);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n    const url = \"https://boiler-stage.ibtikar.sa/api/v1/users\";\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        name: enteredName,\n        password_confirmation: enteredPasswordConfirmation,\n        mobile_number: enteredMobileNumber,\n        returnSecureToken: true,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            console.log(data);\n            let errorMessage = \"Authentication failed!\";\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        console.log(\"pushed\");\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>Register</h1>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            nameHasError ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"name\">Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            required\n            value={enteredName}\n            onChange={nameChangehandler}\n            onBlur={nameBlurHandler}\n          />\n          {nameHasError && <p className={classes.error}>Name is required</p>}\n        </div>\n        <div\n          className={`${classes.control} ${\n            emailHasError ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            required\n            value={enteredEmail}\n            onChange={emailChangehandler}\n            onBlur={emailBlurHandler}\n          />\n          {emailHasError && (\n            <p className={classes.error}>Email format is invalid</p>\n          )}\n        </div>\n        <div\n          className={`${classes.control} ${\n            mobileNumberHasError ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"mobile_number\">Mobile number</label>\n          <PhoneInput\n            name=\"mobile_number\"\n            id=\"mobile_number\"\n            international\n            defaultCountry=\"EG\"\n            required\n            value={enteredMobileNumber}\n            onChange={mobileNumberChangehandler}\n            onBlur={mobileNumberBlurHandler}\n          />\n          {mobileNumberHasError && (\n            <p className={classes.error}>Invalid mobile number</p>\n          )}\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordHasError ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            required\n            onChange={passwordChangehandler}\n            onBlur={passwordBlurHandler}\n            value={enteredPassword}\n          />\n          {passwordHasError && (\n            <p className={classes.error}>\n              Password must be at least 8 characters\n            </p>\n          )}\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordConfirmationHasError ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"password_confirmation\">Password confirmation</label>\n          <input\n            type=\"password\"\n            id=\"password_confirmation\"\n            required\n            value={enteredPasswordConfirmation}\n            onChange={passwordConfirmationChangehandler}\n            onBlur={passwordConfirmationBlurHandler}\n          />\n          {passwordConfirmationHasError && (\n            <p className={classes.error}>Password confirmation doesn't match</p>\n          )}\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && <button>Create Account</button>}\n          {isLoading && <p> Laoding... </p>}\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}