{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useState } from \"react\";\n\nconst useBasicInput = validateValue => {\n  _s();\n\n  const initialInputState = {\n    value: \"\",\n    isTouched: false\n  };\n\n  const inputReducer = (state, action) => {\n    if (action.type === \"INPUT\") {\n      return {\n        value: action.value,\n        isTouched: state.isTouched\n      };\n    }\n\n    if (action.type === \"BLUR\") {\n      return {\n        value: state.value,\n        isTouched: true\n      };\n    }\n\n    if (action.type === \"RESET\") {\n      return {\n        value: \"\",\n        isTouched: false\n      };\n    }\n\n    return initialInputState;\n  };\n\n  const [inputState, dispatch] = useReducer(inputReducer, initialInputState);\n  let enteredValueIsValid = validateValue(inputState.value);\n  let valueHasError = !enteredValueIsValid && inputState.isTouched;\n\n  const valueChangehandler = event => {\n    console.log(typeof event === 'object');\n\n    if (typeof event === 'object') {\n      dispatch({\n        type: \"INPUT\",\n        value: event.target.value\n      });\n    } else {\n      dispatch({\n        type: \"INPUT\",\n        value: event.target.value\n      });\n    }\n  };\n\n  const valueBlurHandler = () => {\n    dispatch({\n      type: \"BLUR\"\n    });\n  };\n\n  const reset = () => {\n    dispatch({\n      type: \"RESET\"\n    });\n  };\n\n  return {\n    value: inputState.value,\n    enteredValueIsValid,\n    valueHasError,\n    valueChangehandler,\n    valueBlurHandler,\n    reset\n  };\n};\n\n_s(useBasicInput, \"gvJkPEQ6Ju5turm8Oo71bK8W7Zk=\");\n\nexport default useBasicInput;","map":{"version":3,"sources":["/home/shefaa/Public/Courses/React/Ibtikar task/01-starting-project (1)/01-starting-project/src/components/hooks/use-basic-input.js"],"names":["useReducer","useState","useBasicInput","validateValue","initialInputState","value","isTouched","inputReducer","state","action","type","inputState","dispatch","enteredValueIsValid","valueHasError","valueChangehandler","event","console","log","target","valueBlurHandler","reset"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;;AAEA,MAAMC,aAAa,GAAIC,aAAD,IAAmB;AAAA;;AAEvC,QAAMC,iBAAiB,GAAG;AACxBC,IAAAA,KAAK,EAAE,EADiB;AAExBC,IAAAA,SAAS,EAAE;AAFa,GAA1B;;AAKA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,QAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,aAAO;AACLL,QAAAA,KAAK,EAAEI,MAAM,CAACJ,KADT;AAELC,QAAAA,SAAS,EAAEE,KAAK,CAACF;AAFZ,OAAP;AAID;;AACD,QAAIG,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,aAAO;AACLL,QAAAA,KAAK,EAAEG,KAAK,CAACH,KADR;AAELC,QAAAA,SAAS,EAAE;AAFN,OAAP;AAID;;AACD,QAAIG,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,aAAO;AACLL,QAAAA,KAAK,EAAE,EADF;AAELC,QAAAA,SAAS,EAAE;AAFN,OAAP;AAID;;AACD,WAAOF,iBAAP;AACD,GApBD;;AAsBA,QAAM,CAACO,UAAD,EAAaC,QAAb,IAAyBZ,UAAU,CAACO,YAAD,EAAeH,iBAAf,CAAzC;AAEA,MAAIS,mBAAmB,GAAGV,aAAa,CAACQ,UAAU,CAACN,KAAZ,CAAvC;AACA,MAAIS,aAAa,GAAG,CAACD,mBAAD,IAAwBF,UAAU,CAACL,SAAvD;;AAEA,QAAMS,kBAAkB,GAAIC,KAAD,IAAW;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOF,KAAP,KAAiB,QAA7B;;AACA,QAAG,OAAOA,KAAP,KAAiB,QAApB,EAA6B;AAC7BJ,MAAAA,QAAQ,CAAC;AACPF,QAAAA,IAAI,EAAE,OADC;AAEPL,QAAAA,KAAK,EAAEW,KAAK,CAACG,MAAN,CAAad;AAFb,OAAD,CAAR;AAID,KALC,MAKG;AACHO,MAAAA,QAAQ,CAAC;AACPF,QAAAA,IAAI,EAAE,OADC;AAEPL,QAAAA,KAAK,EAAEW,KAAK,CAACG,MAAN,CAAad;AAFb,OAAD,CAAR;AAID;AACA,GAbD;;AAeA,QAAMe,gBAAgB,GAAG,MAAM;AAC7BR,IAAAA,QAAQ,CAAC;AACPF,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD,GAJD;;AAMA,QAAMW,KAAK,GAAG,MAAM;AAClBT,IAAAA,QAAQ,CAAC;AACPF,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD,GAJD;;AAMA,SAAO;AACLL,IAAAA,KAAK,EAAGM,UAAU,CAACN,KADd;AAELQ,IAAAA,mBAFK;AAGLC,IAAAA,aAHK;AAILC,IAAAA,kBAJK;AAKLK,IAAAA,gBALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CArED;;GAAMnB,a;;AAuEN,eAAeA,aAAf","sourcesContent":["import { useReducer, useState } from \"react\";\n\nconst useBasicInput = (validateValue) => {\n\n  const initialInputState = {\n    value: \"\",\n    isTouched: false,\n  };\n\n  const inputReducer = (state, action) => {\n    if (action.type === \"INPUT\") {\n      return {\n        value: action.value,\n        isTouched: state.isTouched,\n      };\n    }\n    if (action.type === \"BLUR\") {\n      return {\n        value: state.value,\n        isTouched: true,\n      };\n    }\n    if (action.type === \"RESET\") {\n      return {\n        value: \"\",\n        isTouched: false,\n      };\n    }\n    return initialInputState;\n  };\n\n  const [inputState, dispatch] = useReducer(inputReducer, initialInputState);\n\n  let enteredValueIsValid = validateValue(inputState.value);\n  let valueHasError = !enteredValueIsValid && inputState.isTouched;\n\n  const valueChangehandler = (event) => {\n    console.log(typeof(event) ==='object');\n    if(typeof(event) ==='object'){\n    dispatch({\n      type: \"INPUT\",\n      value: event.target.value,\n    });\n  }else{\n    dispatch({\n      type: \"INPUT\",\n      value: event.target.value,\n    });\n  }\n  };\n\n  const valueBlurHandler = () => {\n    dispatch({\n      type: \"BLUR\",\n    });\n  };\n\n  const reset = () => {\n    dispatch({\n      type: \"RESET\",\n    });\n  };\n\n  return {\n    value : inputState.value,\n    enteredValueIsValid,\n    valueHasError,\n    valueChangehandler,\n    valueBlurHandler,\n    reset,\n  };\n};\n\nexport default useBasicInput;\n"]},"metadata":{},"sourceType":"module"}