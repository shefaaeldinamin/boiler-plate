{"ast":null,"code":"var _jsxFileName = \"/home/shefaa/Public/Courses/React/Ibtikar task/01-starting-project (1)/01-starting-project/src/components/Auth/ResetPasswordForm.js\",\n    _s2 = $RefreshSig$();\n\nimport { useContext, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AuthContext from \"../../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ResetPasswordForm = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const authCtx = useContext(AuthContext);\n  const history = useHistory();\n  const passwordInputRef = useRef();\n  const passwordConfirmationInputRef = useRef();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const submitHandler = event => {\n    _s();\n\n    event.preventDefault();\n    const {\n      value: enteredPassword,\n      enteredValueIsValid: passwordIsValid,\n      valueHasError: passwordHasError,\n      valueChangehandler: passwordChangehandler,\n      valueBlurHandler: passwordBlurHandler,\n      reset: passwordReset\n    } = useBasicInput(value => !(value.length < 8));\n    const {\n      value: enteredPasswordConfirmation,\n      enteredValueIsValid: passwordConfirmationIsValid,\n      valueHasError: passwordConfirmationHasError,\n      valueChangehandler: passwordConfirmationChangehandler,\n      valueBlurHandler: passwordConfirmationBlurHandler,\n      reset: passwordConfirmationReset\n    } = useBasicInput(value => value === enteredPassword);\n    setIsLoading(true);\n    const url = \"https://boiler-stage.ibtikar.sa/api/v1/users/password/reset\";\n    console.log(authCtx.forgotPasswordToken);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        token: authCtx.forgotPasswordToken,\n        email: authCtx.forgotPasswordEmail,\n        password: enteredPassword\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      setIsLoading(false);\n\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          console.log(data);\n          let errorMessage = \"Authentication failed!\";\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      console.log('pushed');\n      history.replace(\"/login\");\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n\n  _s(submitHandler, \"S+/8Fk494Apara28okvzkqlD7gw=\", true);\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reset password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          required: true,\n          ref: passwordInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password_confirmation\",\n          children: \"Password confirmation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password_confirmation\",\n          required: true,\n          ref: passwordConfirmationInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 26\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" Laoding... \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ResetPasswordForm, \"nWRgIlDVKpK3+58qly+jN0XXBTE=\", false, function () {\n  return [useHistory];\n});\n\n_c = ResetPasswordForm;\nexport default ResetPasswordForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPasswordForm\");","map":{"version":3,"sources":["/home/shefaa/Public/Courses/React/Ibtikar task/01-starting-project (1)/01-starting-project/src/components/Auth/ResetPasswordForm.js"],"names":["useContext","useRef","useState","useHistory","AuthContext","classes","ResetPasswordForm","authCtx","history","passwordInputRef","passwordConfirmationInputRef","isLoading","setIsLoading","submitHandler","event","preventDefault","value","enteredPassword","enteredValueIsValid","passwordIsValid","valueHasError","passwordHasError","valueChangehandler","passwordChangehandler","valueBlurHandler","passwordBlurHandler","reset","passwordReset","useBasicInput","length","enteredPasswordConfirmation","passwordConfirmationIsValid","passwordConfirmationHasError","passwordConfirmationChangehandler","passwordConfirmationBlurHandler","passwordConfirmationReset","url","console","log","forgotPasswordToken","fetch","method","body","JSON","stringify","token","email","forgotPasswordEmail","password","headers","then","res","ok","json","data","errorMessage","Error","replace","catch","err","alert","message","auth","control","actions"],"mappings":"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","sourcesContent":["import { useContext, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AuthContext from \"../../store/auth-context\";\n\nimport classes from \"./AuthForm.module.css\";\n\nconst ResetPasswordForm = () => {\n  const authCtx = useContext(AuthContext);\n  const history = useHistory();\n  const passwordInputRef = useRef();\n  const passwordConfirmationInputRef = useRef();\n\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    \n    const {\n      value: enteredPassword,\n      enteredValueIsValid: passwordIsValid,\n      valueHasError: passwordHasError,\n      valueChangehandler: passwordChangehandler,\n      valueBlurHandler: passwordBlurHandler,\n      reset: passwordReset,\n    } = useBasicInput((value) => !(value.length < 8));\n  \n    const {\n      value: enteredPasswordConfirmation,\n      enteredValueIsValid: passwordConfirmationIsValid,\n      valueHasError: passwordConfirmationHasError,\n      valueChangehandler: passwordConfirmationChangehandler,\n      valueBlurHandler: passwordConfirmationBlurHandler,\n      reset: passwordConfirmationReset,\n    } = useBasicInput((value) => value === enteredPassword);\n\n    setIsLoading(true);\n    const url = \"https://boiler-stage.ibtikar.sa/api/v1/users/password/reset\";\n    console.log(authCtx.forgotPasswordToken);\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        token: authCtx.forgotPasswordToken,\n        email: authCtx.forgotPasswordEmail,\n        password: enteredPassword,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            console.log(data);\n            let errorMessage = \"Authentication failed!\";\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        console.log('pushed');\n        history.replace(\"/login\");\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>Reset password</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password_confirmation\">Password confirmation</label>\n          <input\n            type=\"password\"\n            id=\"password_confirmation\"\n            required\n            ref={passwordConfirmationInputRef}\n          />\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && <button>Submit</button>}\n          {isLoading && <p> Laoding... </p>}\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default ResetPasswordForm;\n"]},"metadata":{},"sourceType":"module"}