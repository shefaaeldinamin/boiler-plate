{"version":3,"file":"react-phone-number-input-mobile.js","sources":["../node_modules/classnames/index.js","../node_modules/input-format/modules/helpers.js","../node_modules/input-format/modules/closeBraces.js","../node_modules/input-format/modules/format.js","../node_modules/input-format/modules/templateFormatter.js","../node_modules/input-format/modules/dom.js","../node_modules/input-format/modules/inputControl.js","../node_modules/input-format/modules/parse.js","../node_modules/input-format/modules/edit.js","../node_modules/input-format/modules/react/Input.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","../node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","../node_modules/libphonenumber-js/es6/helpers/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","../node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/helpers/RFC3966.js","../node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","../node_modules/libphonenumber-js/es6/helpers/getNumberType.js","../node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","../node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js","../node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","../node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","../node_modules/libphonenumber-js/es6/isValidPhoneNumber.js","../node_modules/libphonenumber-js/es6/isPossiblePhoneNumber.js","../node_modules/libphonenumber-js/es6/AsYouTypeState.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js","../node_modules/libphonenumber-js/es6/AsYouTypeParser.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/libphonenumber-js/es6/getCountries.js","../modules/helpers/inputValuePrefix.js","../modules/InputSmart.js","../modules/InputBasic.js","../node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","../modules/Flag.js","../modules/InternationalIcon.js","../modules/helpers/countries.js","../modules/CountryIcon.js","../modules/PropTypes.js","../modules/helpers/getInternationalPhoneNumberPrefix.js","../modules/helpers/phoneInputHelpers.js","../modules/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js","../modules/PhoneInputWithCountry.js","../modules/libphonenumber/formatPhoneNumber.js","../node_modules/country-flag-icons/modules/unicode.js","../modules/CountrySelect.js","../modules/PhoneInputWithCountryDefault.js","../mobile/index.js"],"sourcesContent":["/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes)\n  // but template placeholder characters don't fall into that range\n  // so skipping such miscellaneous \"exotic\" characters\n  // won't matter here for just counting placeholder character occurrences.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n}\n//# sourceMappingURL=helpers.js.map","import { count_occurences } from './helpers';\nexport default function closeBraces(retained_template, template) {\n  var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n  var cut_before = retained_template.length;\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    retained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return retained_template;\n}\n//# sourceMappingURL=closeBraces.js.map","import template_formatter from './templateFormatter'; // Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\n\nexport default function format(value, caret, formatter) {\n  if (typeof formatter === 'string') {\n    formatter = template_formatter(formatter);\n  }\n\n  var _ref = formatter(value) || {},\n      text = _ref.text,\n      template = _ref.template;\n\n  if (text === undefined) {\n    text = value;\n  }\n\n  if (template) {\n    if (caret === undefined) {\n      caret = text.length;\n    } else {\n      var index = 0;\n      var found = false;\n      var possibly_last_input_character_index = -1;\n\n      while (index < text.length && index < template.length) {\n        // Character placeholder found\n        if (text[index] !== template[index]) {\n          if (caret === 0) {\n            found = true;\n            caret = index;\n            break;\n          }\n\n          possibly_last_input_character_index = index;\n          caret--;\n        }\n\n        index++;\n      } // If the caret was positioned after last input character,\n      // then the text caret index is just after the last input character.\n\n\n      if (!found) {\n        caret = possibly_last_input_character_index + 1;\n      }\n    }\n  }\n\n  return {\n    text: text,\n    caret: caret\n  };\n}\n//# sourceMappingURL=format.js.map","import { count_occurences } from './helpers';\nimport close_braces from './closeBraces'; // Takes a `template` where character placeholders\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\n//\n// Returns a function which takes `value` characters\n// and returns the `template` filled with those characters.\n// If the `template` can only be partially filled\n// then it is cut off.\n//\n// If `should_close_braces` is `true`,\n// then it will also make sure all dangling braces are closed,\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\n//\n\nexport default function (template) {\n  var placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n  var should_close_braces = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!template) {\n    return function (value) {\n      return {\n        text: value\n      };\n    };\n  }\n\n  var characters_in_template = count_occurences(placeholder, template);\n  return function (value) {\n    if (!value) {\n      return {\n        text: '',\n        template: template\n      };\n    }\n\n    var value_character_index = 0;\n    var filled_in_template = ''; // Using `.split('')` here instead of normal `for ... of`\n    // because the importing application doesn't neccessarily include an ES6 polyfill.\n    // The `.split('')` approach discards \"exotic\" UTF-8 characters\n    // (the ones consisting of four bytes)\n    // but template placeholder characters don't fall into that range\n    // and appending UTF-8 characters to a string in parts still works.\n\n    for (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var character = _ref;\n\n      if (character !== placeholder) {\n        filled_in_template += character;\n        continue;\n      }\n\n      filled_in_template += value[value_character_index];\n      value_character_index++; // If the last available value character has been filled in,\n      // then return the filled in template\n      // (either trim the right part or retain it,\n      //  if no more character placeholders in there)\n\n      if (value_character_index === value.length) {\n        // If there are more character placeholders\n        // in the right part of the template\n        // then simply trim it.\n        if (value.length < characters_in_template) {\n          break;\n        }\n      }\n    }\n\n    if (should_close_braces) {\n      filled_in_template = close_braces(filled_in_template, template);\n    }\n\n    return {\n      text: filled_in_template,\n      template: template\n    };\n  };\n}\n//# sourceMappingURL=templateFormatter.js.map","// Gets <input/> selection bounds\nexport function getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\nexport var Keys = {\n  Backspace: 8,\n  Delete: 46\n}; // Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\n\nexport function getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\nexport function getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\nexport function setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\n\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;\n//# sourceMappingURL=dom.js.map","import edit from './edit';\nimport parse from './parse';\nimport format from './format';\nimport { getOperation, getSelection, getCaretPosition, setCaretPosition } from './dom'; // Deprecated.\n// I don't know why this function exists.\n\nexport function onCut(event, input, _parse, _format, on_change) {\n  // The actual cut hasn't happened just yet hence the timeout.\n  setTimeout(function () {\n    return formatInputText(input, _parse, _format, undefined, on_change);\n  }, 0);\n} // Deprecated.\n// I don't know why this function exists.\n\nexport function onPaste(event, input, _parse, _format, on_change) {\n  var selection = getSelection(input); // If selection is made,\n  // just erase the selected text\n  // prior to pasting\n\n  if (selection) {\n    eraseSelection(input, selection);\n  }\n\n  formatInputText(input, _parse, _format, undefined, on_change);\n}\nexport function onChange(event, input, _parse, _format, on_change) {\n  formatInputText(input, _parse, _format, undefined, on_change);\n} // \"Delete\" and \"Backspace\" keys are special\n// in a way that they're not handled by the regular `onChange()` handler\n// and instead are intercepted and re-applied manually.\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\n// results in erasing a character, but that character might be any character,\n// while it would be a better \"user experience\" if it erased not just any character\n// but the closest \"meaningful\" character.\n// For example, if a template is `(xxx) xxx-xxxx`,\n// and the `<input/>` value is `(111) 222-3333`,\n// then, if a user begins erasing the `3333` part via \"Backspace\"\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\n// Nothing wrong with that, but it would be a better \"user experience\"\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\n// character, which would be the rightmost `2`.\n// So, what this `onKeyDown()` handler does is it intercepts\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\n// following the logic described above.\n\nexport function onKeyDown(event, input, _parse, _format, on_change) {\n  var operation = getOperation(event);\n\n  switch (operation) {\n    case 'Delete':\n    case 'Backspace':\n      // Intercept this operation and perform it manually.\n      event.preventDefault();\n      var selection = getSelection(input); // If a selection is made, just erase the selected text.\n\n      if (selection) {\n        eraseSelection(input, selection);\n        return formatInputText(input, _parse, _format, undefined, on_change);\n      } // Else, perform the (character erasing) operation manually.\n\n\n      return formatInputText(input, _parse, _format, operation, on_change);\n\n    default: // Will be handled normally as part of the `onChange` handler.\n\n  }\n}\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\n\nfunction eraseSelection(input, selection) {\n  var text = input.value;\n  text = text.slice(0, selection.start) + text.slice(selection.end);\n  input.value = text;\n  setCaretPosition(input, selection.start);\n}\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\n\n\nfunction formatInputText(input, _parse, _format, operation, on_change) {\n  // Parse `<input/>` textual value.\n  // Get the `value` and `caret` position.\n  var _parse2 = parse(input.value, getCaretPosition(input), _parse),\n      value = _parse2.value,\n      caret = _parse2.caret; // If a user performed an operation (\"Backspace\", \"Delete\")\n  // then apply that operation and get the new `value` and `caret` position.\n\n\n  if (operation) {\n    var newValueAndCaret = edit(value, caret, operation);\n    value = newValueAndCaret.value;\n    caret = newValueAndCaret.caret;\n  } // Format the `value`.\n  // (and reposition the caret accordingly)\n\n\n  var formatted = format(value, caret, _format);\n  var text = formatted.text;\n  caret = formatted.caret; // Set `<input/>` textual value manually\n  // to prevent React from resetting the caret position\n  // later inside a subsequent `render()`.\n  // Doesn't work for custom `inputComponent`s for some reason.\n\n  input.value = text; // Position the caret properly.\n\n  setCaretPosition(input, caret); // If the `<input/>` textual value did change,\n  // then the parsed `value` may have changed too.\n\n  on_change(value);\n}\n//# sourceMappingURL=inputControl.js.map","// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nexport default function parse(text, caret_position, parse_character) {\n  var value = '';\n  var focused_input_character_index = 0;\n  var index = 0;\n\n  while (index < text.length) {\n    var character = parse_character(text[index], value);\n\n    if (character !== undefined) {\n      value += character;\n\n      if (caret_position !== undefined) {\n        if (caret_position === index) {\n          focused_input_character_index = value.length - 1;\n        } else if (caret_position > index) {\n          focused_input_character_index = value.length;\n        }\n      }\n    }\n\n    index++;\n  } // If caret position wasn't specified\n\n\n  if (caret_position === undefined) {\n    // Then set caret position to \"after the last input character\"\n    focused_input_character_index = value.length;\n  }\n\n  var result = {\n    value: value,\n    caret: focused_input_character_index\n  };\n  return result;\n}\n//# sourceMappingURL=parse.js.map","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nexport default function edit(value, caret, operation) {\n  switch (operation) {\n    case 'Backspace':\n      // If there exists the previous character,\n      // then erase it and reposition the caret.\n      if (caret > 0) {\n        // Remove the previous character\n        value = value.slice(0, caret - 1) + value.slice(caret); // Position the caret where the previous (erased) character was\n\n        caret--;\n      }\n\n      break;\n\n    case 'Delete':\n      // Remove current digit (if any)\n      value = value.slice(0, caret) + value.slice(caret + 1);\n      break;\n  }\n\n  return {\n    value: value,\n    caret: caret\n  };\n}\n//# sourceMappingURL=edit.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// This is just `./ReactInput.js` rewritten in Hooks.\nimport React, { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { onChange as onInputChange, onKeyDown as onInputKeyDown } from '../inputControl'; // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\nfunction Input(_ref, ref) {\n  var value = _ref.value,\n      parse = _ref.parse,\n      format = _ref.format,\n      InputComponent = _ref.inputComponent,\n      onChange = _ref.onChange,\n      onKeyDown = _ref.onKeyDown,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"parse\", \"format\", \"inputComponent\", \"onChange\", \"onKeyDown\"]);\n\n  var internalRef = useRef();\n  var setRef = useCallback(function (instance) {\n    internalRef.current = instance;\n\n    if (ref) {\n      if (typeof ref === 'function') {\n        ref(instance);\n      } else {\n        ref.current = instance;\n      }\n    }\n  }, [ref]);\n\n  var _onChange = useCallback(function (event) {\n    return onInputChange(event, internalRef.current, parse, format, onChange);\n  }, [internalRef, parse, format, onChange]);\n\n  var _onKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    return onInputKeyDown(event, internalRef.current, parse, format, onChange);\n  }, [internalRef, parse, format, onChange, onKeyDown]);\n\n  return React.createElement(InputComponent, _extends({}, rest, {\n    ref: setRef,\n    value: format(isEmptyValue(value) ? '' : value).text,\n    onKeyDown: _onKeyDown,\n    onChange: _onChange\n  }));\n}\n\nInput = React.forwardRef(Input);\nInput.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: PropTypes.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: PropTypes.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: PropTypes.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: PropTypes.string.isRequired,\n  // Is parsed from <input/> text.\n  value: PropTypes.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: PropTypes.func.isRequired,\n  // Passthrough\n  onKeyDown: PropTypes.func,\n  onCut: PropTypes.func,\n  onPaste: PropTypes.func\n};\nInput.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n};\nexport default Input;\n\nfunction isEmptyValue(value) {\n  return value === undefined || value === null;\n}\n//# sourceMappingURL=Input.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport { ParseError as default };\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n//# sourceMappingURL=semver-compare.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport compare from './tools/semver-compare'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata =\n/*#__PURE__*/\nfunction () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan =\n/*#__PURE__*/\nfunction () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    }\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    }\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format =\n/*#__PURE__*/\nfunction () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type =\n/*#__PURE__*/\nfunction () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n//# sourceMappingURL=metadata.js.map","import { VALID_DIGITS } from '../../constants'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n//# sourceMappingURL=createExtensionPattern.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants';\nimport createExtensionPattern from './extension/createExtensionPattern'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){1,2}' + '$', 'i');\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + createExtensionPattern() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n} // This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nexport function isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","import createExtensionPattern from './createExtensionPattern'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}\n//# sourceMappingURL=extractExtension.js.map","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map","import { parseDigit } from './helpers/parseDigits';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","import mergeArrays from './mergeArrays';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n      return 'INVALID_LENGTH';\n    }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=checkNumberLength.js.map","/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=mergeArrays.js.map","import Metadata from './metadata';\nimport checkNumberLength from './helpers/checkNumberLength';\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  }\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport isViablePhoneNumber from './isViablePhoneNumber'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var part = _ref;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref2) {\n  var number = _ref2.number,\n      ext = _ref2.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n//# sourceMappingURL=matchesEntirely.js.map","import Metadata from '../metadata';\nimport matchesEntirely from './matchesEntirely';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // v1 metadata.\n    // Legacy.\n    // Deprecated.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _i = 0, _NON_FIXED_LINE_PHONE = NON_FIXED_LINE_PHONE_TYPES; _i < _NON_FIXED_LINE_PHONE.length; _i++) {\n    var type = _NON_FIXED_LINE_PHONE[_i];\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}\n//# sourceMappingURL=getNumberType.js.map","import { VALID_PUNCTUATION } from '../constants'; // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n//# sourceMappingURL=applyInternationalSeparatorStyle.js.map","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle'; // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport default function formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n      withNationalPrefix = _ref.withNationalPrefix,\n      carrierCode = _ref.carrierCode,\n      metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n//# sourceMappingURL=formatNationalNumberUsingFormat.js.map","import Metadata from '../metadata';\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}\n//# sourceMappingURL=getIddPrefix.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport matchesEntirely from './helpers/matchesEntirely';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat';\nimport Metadata, { getCountryCallingCode } from './metadata';\nimport getIddPrefix from './helpers/getIddPrefix';\nimport { formatRFC3966 } from './helpers/RFC3966';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  } // Formats a phone number\n  //\n  // Example use cases:\n  //\n  // ```js\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n  // formatNumber('+78005553535', 'NATIONAL')\n  // formatNumber('+78005553535', 'NATIONAL', metadata)\n  // ```\n  //\n\n};\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread({}, DEFAULT_OPTIONS, options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var format = _ref;\n\n    // Validate leading digits\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n//# sourceMappingURL=format_.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './helpers/getNumberType';\nimport formatNumber from './format_';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber =\n/*#__PURE__*/\nfunction () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n\n    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread({}, options, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n//# sourceMappingURL=PhoneNumber.js.map","import Metadata from './metadata';\nimport matchesEntirely from './helpers/matchesEntirely';\nimport getNumberType from './helpers/getNumberType';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","import Metadata from '../metadata';\nimport { VALID_DIGITS } from '../constants';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}\n//# sourceMappingURL=stripIddPrefix.js.map","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n          // `prefixBeforeNationalNumber` is the whole substring matched by\n          // the `national_prefix_for_parsing` regular expression.\n          // There seem to be no guarantees that it's just a national prefix.\n          // For example, if there's a carrier code, it's gonna be a\n          // part of `prefixBeforeNationalNumber` too.\n          var prefixBeforeNationalNumber = prefixMatch[0];\n          nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n          // then carrier code is the first one.\n\n          if (hasCapturedGroups) {\n            carrierCode = prefixMatch[1];\n          }\n        } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n\n      var nationalPrefix;\n\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\n//# sourceMappingURL=extractNationalNumberFromPossiblyIncompleteNumber.js.map","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber';\nimport matchesEntirely from './matchesEntirely';\nimport checkNumberLength from './checkNumberLength';\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode;\n\n  if (!shouldExtractNationalPrefix(number, nationalNumber, metadata)) {\n    // Don't strip the national prefix.\n    return {\n      nationalNumber: number\n    };\n  } // If a national prefix has been extracted, check to see\n  // if the resultant number isn't too short.\n  // Same code in Google's `libphonenumber`:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3291-L3302\n  // For some reason, they do this check right after the `national_number_pattern` check\n  // this library does in `shouldExtractNationalPrefix()` function.\n  // Why is there a second \"resultant\" number validity check?\n  // They don't provide an explanation.\n  // This library just copies the behavior.\n\n\n  if (number.length !== nationalNumber.length + (carrierCode ? carrierCode.length : 0)) {\n    // If not using legacy generated metadata (before version `1.0.18`)\n    // then it has \"possible lengths\", so use those to validate the number length.\n    if (metadata.possibleLengths()) {\n      // \"We require that the NSN remaining after stripping the national prefix and\n      // carrier code be long enough to be a possible length for the region.\n      // Otherwise, we don't do the stripping, since the original number could be\n      // a valid short number.\"\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      switch (checkNumberLength(nationalNumber, metadata)) {\n        case 'TOO_SHORT':\n        case 'INVALID_LENGTH':\n          // case 'IS_POSSIBLE_LOCAL_ONLY':\n          // Don't strip the national prefix.\n          return {\n            nationalNumber: number\n          };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldExtractNationalPrefix(number, nationalSignificantNumber, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(number, metadata.nationalNumberPattern()) && !matchesEntirely(nationalSignificantNumber, metadata.nationalNumberPattern())) {\n    return false;\n  } // Just \"possible\" number check would be more relaxed, so it's not used.\n  // if (isPossibleNumber(number, metadata) &&\n  // \t!isPossibleNumber(numberWithNationalPrefixExtracted, metadata)) {\n  // \treturn false\n  // }\n\n\n  return true;\n}\n//# sourceMappingURL=extractNationalNumber.js.map","import Metadata from '../metadata';\nimport matchesEntirely from './matchesEntirely';\nimport extractNationalNumber from './extractNationalNumber';\nimport checkNumberLength from './checkNumberLength';\nimport getCountryCallingCode from '../getCountryCallingCode';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}\n//# sourceMappingURL=extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js.map","import stripIddPrefix from './stripIddPrefix';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign';\nimport Metadata from '../metadata';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}\n//# sourceMappingURL=extractCountryCallingCode.js.map","import Metadata from '../metadata';\nimport getNumberType from './getNumberType';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest one\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n        phone: nationalPhoneNumber,\n        country: country\n      }, undefined, metadata.metadata)) {\n        return country;\n      }\n  }\n}\n//# sourceMappingURL=getCountryByCallingCode.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber';\nimport extractExtension from './helpers/extension/extractExtension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport { isPossibleNumber } from './isPossibleNumber_';\nimport { parseRFC3966 } from './helpers/RFC3966';\nimport PhoneNumber from './PhoneNumber';\nimport matchesEntirely from './helpers/matchesEntirely';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign';\nimport extractNationalNumber from './helpers/extractNationalNumber';\nimport stripIddPrefix from './helpers/stripIddPrefix';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext,\n      error = _parseInput.error; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError('TOO_SHORT');\n      }\n\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  }\n\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2, extract) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, extract, v2); // If the phone number is not viable, then abort.\n\n  if (!number) {\n    return {};\n  }\n\n  if (!isViablePhoneNumber(number)) {\n    if (isViablePhoneNumberStart(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n      metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n      if (defaultCountry) {\n        country = defaultCountry;\n      } else {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            country = '001';\n          }\n        }\n      }\n\n      countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n    } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n//# sourceMappingURL=parse_.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parseNumber from './parse_';\nexport default function parsePhoneNumber(text, options, metadata) {\n  return parseNumber(text, _objectSpread({}, options, {\n    v2: true\n  }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n      if (arg_3) {\n        options = arg_2;\n        metadata = arg_3;\n      } else {\n        metadata = arg_2;\n      }\n    } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread({}, options, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumber(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\nexport default function parsePhoneNumberFromString() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumberFromString_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString from './parsePhoneNumberFromString_';\nexport default function isValidPhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread({}, options, {\n    extract: false\n  });\n  var phoneNumber = parsePhoneNumberFromString(text, options, metadata);\n  return phoneNumber && phoneNumber.isValid() || false;\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString from './parsePhoneNumberFromString_';\nexport default function isPossiblePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread({}, options, {\n    extract: false\n  });\n  var phoneNumber = parsePhoneNumberFromString(text, options, metadata);\n  return phoneNumber && phoneNumber.isPossible() || false;\n}\n//# sourceMappingURL=isPossiblePhoneNumber.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar AsYouTypeState =\n/*#__PURE__*/\nfunction () {\n  function AsYouTypeState(_ref) {\n    var _this = this;\n\n    var onCountryChange = _ref.onCountryChange,\n        onCallingCodeChange = _ref.onCallingCodeChange;\n\n    _classCallCheck(this, AsYouTypeState);\n\n    _defineProperty(this, \"update\", function (properties) {\n      for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        _this[key] = properties[key];\n      }\n    });\n\n    this.onCountryChange = onCountryChange;\n    this.onCallingCodeChange = onCallingCodeChange;\n  }\n\n  _createClass(AsYouTypeState, [{\n    key: \"reset\",\n    value: function reset(defaultCountry, defaultCallingCode) {\n      this.international = false;\n      this.IDDPrefix = undefined;\n      this.missingPlus = undefined;\n      this.callingCode = undefined;\n      this.digits = '';\n      this.resetNationalSignificantNumber();\n      this.initCountryAndCallingCode(defaultCountry, defaultCallingCode);\n    }\n  }, {\n    key: \"resetNationalSignificantNumber\",\n    value: function resetNationalSignificantNumber() {\n      this.nationalSignificantNumber = this.getNationalDigits();\n      this.nationalSignificantNumberMatchesInput = true;\n      this.nationalPrefix = undefined;\n      this.carrierCode = undefined;\n      this.complexPrefixBeforeNationalSignificantNumber = undefined;\n    }\n  }, {\n    key: \"initCountryAndCallingCode\",\n    value: function initCountryAndCallingCode(country, callingCode) {\n      this.setCountry(country);\n      this.setCallingCode(callingCode);\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country) {\n      this.country = country;\n      this.onCountryChange(country);\n    }\n  }, {\n    key: \"setCallingCode\",\n    value: function setCallingCode(callingCode) {\n      this.callingCode = callingCode;\n      return this.onCallingCodeChange(this.country, callingCode);\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber() {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.initCountryAndCallingCode();\n    }\n  }, {\n    key: \"appendDigits\",\n    value: function appendDigits(nextDigits) {\n      this.digits += nextDigits;\n    }\n  }, {\n    key: \"appendNationalSignificantNumberDigits\",\n    value: function appendNationalSignificantNumberDigits(nextDigits) {\n      this.nationalSignificantNumber += nextDigits;\n    }\n    /**\r\n     * Returns the part of `this.digits` that corresponds to the national number.\r\n     * Basically, all digits that have been input by the user, except for the\r\n     * international prefix and the country calling code part\r\n     * (if the number is an international one).\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getNationalDigits\",\n    value: function getNationalDigits() {\n      if (this.international) {\n        return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));\n      }\n\n      return this.digits;\n    }\n  }, {\n    key: \"getDigitsWithoutInternationalPrefix\",\n    value: function getDigitsWithoutInternationalPrefix() {\n      if (this.international) {\n        if (this.IDDPrefix) {\n          return this.digits.slice(this.IDDPrefix.length);\n        }\n      }\n\n      return this.digits;\n    }\n  }]);\n\n  return AsYouTypeState;\n}();\n\nexport { AsYouTypeState as default };\n//# sourceMappingURL=AsYouTypeState.js.map","// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nexport function closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n}\nexport function stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _i2 = 0, _dangling_braces = dangling_braces; _i2 < _dangling_braces.length; _i2++) {\n    var index = _dangling_braces[_i2];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function populateTemplateWithDigits(template, position, digits) {\n  // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for `digits` it is safe.\n  // for (const digit of digits)\n  for (var _iterator2 = digits.split(''), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _ref2;\n\n    if (_isArray2) {\n      if (_i3 >= _iterator2.length) break;\n      _ref2 = _iterator2[_i3++];\n    } else {\n      _i3 = _iterator2.next();\n      if (_i3.done) break;\n      _ref2 = _i3.value;\n    }\n\n    var digit = _ref2;\n\n    // If there is room for more digits in current `template`,\n    // then set the next digit in the `template`,\n    // and return the formatted digits so far.\n    // If more digits are entered than the current format could handle.\n    if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n      return;\n    }\n\n    position = template.search(DIGIT_PLACEHOLDER_MATCHER);\n    template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n  }\n\n  return [template, position];\n}\n//# sourceMappingURL=AsYouTypeFormatter.util.js.map","import checkNumberLength from './helpers/checkNumberLength';\nimport parseDigits from './helpers/parseDigits';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat';\nexport default function formatCompleteNumber(state, format, _ref) {\n  var metadata = _ref.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref.getSeparatorAfterNationalPrefix;\n  var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n\n  if (matcher.test(state.nationalSignificantNumber)) {\n    return formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\n      metadata: metadata,\n      shouldTryNationalPrefixFormattingRule: shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix\n    });\n  }\n}\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\n  return checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE';\n}\n\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, _ref2) {\n  var metadata = _ref2.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref2.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref2.getSeparatorAfterNationalPrefix;\n  // `format` has already been checked for `nationalPrefix` requirement.\n  var nationalSignificantNumber = state.nationalSignificantNumber,\n      international = state.international,\n      nationalPrefix = state.nationalPrefix,\n      carrierCode = state.carrierCode; // Format the number with using `national_prefix_formatting_rule`.\n  // If the resulting formatted number is a valid formatted number, then return it.\n  //\n  // Google's AsYouType formatter is different in a way that it doesn't try\n  // to format using the \"national prefix formatting rule\", and instead it\n  // simply prepends a national prefix followed by a \" \" character.\n  // This code does that too, but as a fallback.\n  // The reason is that \"national prefix formatting rule\" may use parentheses,\n  // which wouldn't be included has it used the simpler Google's way.\n  //\n\n  if (shouldTryNationalPrefixFormattingRule(format)) {\n    var formattedNumber = formatNationalNumber(state, format, {\n      useNationalPrefixFormattingRule: true,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n      metadata: metadata\n    });\n\n    if (formattedNumber) {\n      return formattedNumber;\n    }\n  } // Format the number without using `national_prefix_formatting_rule`.\n\n\n  return formatNationalNumber(state, format, {\n    useNationalPrefixFormattingRule: false,\n    getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n    metadata: metadata\n  });\n}\n\nfunction formatNationalNumber(state, format, _ref3) {\n  var metadata = _ref3.metadata,\n      useNationalPrefixFormattingRule = _ref3.useNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref3.getSeparatorAfterNationalPrefix;\n  var formattedNationalNumber = formatNationalNumberUsingFormat(state.nationalSignificantNumber, format, {\n    carrierCode: state.carrierCode,\n    useInternationalFormat: state.international,\n    withNationalPrefix: useNationalPrefixFormattingRule,\n    metadata: metadata\n  });\n\n  if (!useNationalPrefixFormattingRule) {\n    if (state.nationalPrefix) {\n      // If a national prefix was extracted, then just prepend it,\n      // followed by a \" \" character.\n      formattedNationalNumber = state.nationalPrefix + getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n    } else if (state.complexPrefixBeforeNationalSignificantNumber) {\n      formattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber + ' ' + formattedNationalNumber;\n    }\n  }\n\n  if (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\n    return formattedNationalNumber;\n  }\n} // Check that the formatted phone number contains exactly\n// the same digits that have been input by the user.\n// For example, when \"0111523456789\" is input for `AR` country,\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\n// which means that the national part of `this.digits` isn't simply equal to\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\n//\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\n// being formatted via `metadata[country].national_prefix_transform_rule`.\n// For example, for `VI` country, it prepends `340` to the national number,\n// and if this check hasn't been implemented, then there would be a bug\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\n//\n// So, all these \"gotchas\" are filtered out.\n//\n// In the original Google's code, the comments say:\n// \"Check that we didn't remove nor add any extra digits when we matched\n// this formatting pattern. This usually happens after we entered the last\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n// formatted but AYTF should retain all the number entered and not change\n// in order to match a format (of same leading digits and length) display\n// in that way.\"\n// \"If it's the same (i.e entered number and format is same), then it's\n// safe to return this in formatted number as nothing is lost / added.\"\n// Otherwise, don't use this format.\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n//\n\n\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\n  return parseDigits(formattedNationalNumber) === state.getNationalDigits();\n}\n//# sourceMappingURL=AsYouTypeFormatter.complete.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { DIGIT_PLACEHOLDER, countOccurences, repeat, cutAndStripNonPairedParens, closeNonPairedParens, stripNonPairedParens, populateTemplateWithDigits } from './AsYouTypeFormatter.util';\nimport formatCompleteNumber, { canFormatCompleteNumber } from './AsYouTypeFormatter.complete';\nimport parseDigits from './helpers/parseDigits';\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util';\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat';\nimport { VALID_PUNCTUATION } from './constants';\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A regular expression that is used to determine if a `format` is\n// suitable to be used in the \"as you type formatter\".\n// A `format` is suitable when the resulting formatted number has\n// the same digits as the user has entered.\n//\n// In the simplest case, that would mean that the format\n// doesn't add any additional digits when formatting a number.\n// Google says that it also shouldn't add \"star\" (`*`) characters,\n// like it does in some Israeli formats.\n// Such basic format would only contain \"valid punctuation\"\n// and \"captured group\" identifiers ($1, $2, etc).\n//\n// An example of a format that adds additional digits:\n//\n// Country: `AR` (Argentina).\n// Format:\n// {\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n//    \"leading_digits_patterns\": [\"91\"],\n//    \"national_prefix_formatting_rule\": \"0$1\",\n//    \"format\": \"$2 15-$3-$4\",\n//    \"international_format\": \"$1 $2 $3-$4\"\n// }\n//\n// In the format above, the `format` adds `15` to the digits when formatting a number.\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\n// has previously removed `15` from a national number, so re-adding `15` in `format`\n// doesn't actually result in any extra digits added to user's input.\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\n//\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\n// `libphonenumber` code.\n//\n\n\nvar NON_ALTERING_FORMAT_REG_EXP = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar AsYouTypeFormatter =\n/*#__PURE__*/\nfunction () {\n  function AsYouTypeFormatter(_ref) {\n    var _this = this;\n\n    var state = _ref.state,\n        metadata = _ref.metadata;\n\n    _classCallCheck(this, AsYouTypeFormatter);\n\n    _defineProperty(this, \"getSeparatorAfterNationalPrefix\", function (format) {\n      // `US` metadata doesn't have a `national_prefix_formatting_rule`,\n      // so the `if` condition below doesn't apply to `US`,\n      // but in reality there shoudl be a separator\n      // between a national prefix and a national (significant) number.\n      // So `US` national prefix separator is a \"special\" \"hardcoded\" case.\n      if (_this.isNANP) {\n        return ' ';\n      } // If a `format` has a `national_prefix_formatting_rule`\n      // and that rule has a separator after a national prefix,\n      // then it means that there should be a separator\n      // between a national prefix and a national (significant) number.\n\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      } // At this point, there seems to be no clear evidence that\n      // there should be a separator between a national prefix\n      // and a national (significant) number. So don't insert one.\n\n\n      return '';\n    });\n\n    _defineProperty(this, \"shouldTryNationalPrefixFormattingRule\", function (format, _ref2) {\n      var international = _ref2.international,\n          nationalPrefix = _ref2.nationalPrefix;\n\n      if (format.nationalPrefixFormattingRule()) {\n        // In some countries, `national_prefix_formatting_rule` is `($1)`,\n        // so it applies even if the user hasn't input a national prefix.\n        // `format.usesNationalPrefix()` detects such cases.\n        var usesNationalPrefix = format.usesNationalPrefix();\n\n        if (usesNationalPrefix && nationalPrefix || !usesNationalPrefix && !international) {\n          return true;\n        }\n      }\n    });\n\n    this.metadata = metadata;\n    this.resetFormat();\n  }\n\n  _createClass(AsYouTypeFormatter, [{\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.nationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan, state) {\n      this.resetFormat();\n\n      if (numberingPlan) {\n        this.isNANP = numberingPlan.callingCode() === '1';\n        this.matchingFormats = numberingPlan.formats();\n\n        if (state.nationalSignificantNumber) {\n          this.narrowDownMatchingFormats(state);\n        }\n      } else {\n        this.isNANP = undefined;\n        this.matchingFormats = [];\n      }\n    }\n  }, {\n    key: \"format\",\n    value: function format(nextDigits, state) {\n      var _this2 = this;\n\n      // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNationalNumberWithNextDigits()`,\n      // which formats based on the chosen formatting pattern.\n      //\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`, so this library just follows it.\n      // Google's `libphonenumber` code doesn't explain in detail why does it\n      // attempt to format digits as a complete phone number\n      // instead of just going with a previoulsy (or newly) chosen `format`:\n      //\n      // \"Checks to see if there is an exact pattern match for these digits.\n      //  If so, we should use this instead of any other formatting template\n      //  whose leadingDigitsPattern also matches the input.\"\n      //\n      if (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\n        for (var _iterator = this.matchingFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref3;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref3 = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref3 = _i.value;\n          }\n\n          var format = _ref3;\n          var formattedCompleteNumber = formatCompleteNumber(state, format, {\n            metadata: this.metadata,\n            shouldTryNationalPrefixFormattingRule: function shouldTryNationalPrefixFormattingRule(format) {\n              return _this2.shouldTryNationalPrefixFormattingRule(format, {\n                international: state.international,\n                nationalPrefix: state.nationalPrefix\n              });\n            },\n            getSeparatorAfterNationalPrefix: this.getSeparatorAfterNationalPrefix\n          });\n\n          if (formattedCompleteNumber) {\n            this.resetFormat();\n            this.chosenFormat = format;\n            this.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state);\n            this.populatedNationalNumberTemplate = formattedCompleteNumber; // With a new formatting template, the matched position\n            // using the old template needs to be reset.\n\n            this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER);\n            return formattedCompleteNumber;\n          }\n        }\n      } // Format the digits as a partial (incomplete) phone number\n      // using the previously chosen formatting pattern (or a newly chosen one).\n\n\n      return this.formatNationalNumberWithNextDigits(nextDigits, state);\n    } // Formats the next phone number digits.\n\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits, state) {\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat(state);\n\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If it can format the next (current) digits\n          // using the previously chosen phone number format\n          // then return the updated formatted number.\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then re-format the national phone number part\n          // using the newly selected format.\n          return this.formatNextNationalNumberDigits(state.getNationalDigits());\n        }\n      }\n    }\n  }, {\n    key: \"narrowDownMatchingFormats\",\n    value: function narrowDownMatchingFormats(_ref4) {\n      var _this3 = this;\n\n      var nationalSignificantNumber = _ref4.nationalSignificantNumber,\n          nationalPrefix = _ref4.nationalPrefix,\n          international = _ref4.international;\n      var leadingDigits = nationalSignificantNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        return _this3.formatSuits(format, international, nationalPrefix) && _this3.formatMatches(format, leadingDigits, leadingDigitsPatternIndex);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"formatSuits\",\n    value: function formatSuits(format, international, nationalPrefix) {\n      // When a prefix before a national (significant) number is\n      // simply a national prefix, then it's parsed as `this.nationalPrefix`.\n      // In more complex cases, a prefix before national (significant) number\n      // could include a national prefix as well as some \"capturing groups\",\n      // and in that case there's no info whether a national prefix has been parsed.\n      // If national prefix is not used when formatting a phone number\n      // using this format, but a national prefix has been entered by the user,\n      // and was extracted, then discard such phone number format.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\n      if (nationalPrefix && !format.usesNationalPrefix() && // !format.domesticCarrierCodeFormattingRule() &&\n      !format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\n        return false;\n      } // If national prefix is mandatory for this phone number format\n      // and there're no guarantees that a national prefix is present in user input\n      // then discard this phone number format as not suitable.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\n\n\n      if (!international && !nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"formatMatches\",\n    value: function formatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\n      var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n      // leading digits pattern then it fits.\n\n      if (leadingDigitsPatternsCount === 0) {\n        return true;\n      } // Start excluding any non-matching formats only when the\n      // national number entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives.\n      // For example, when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n\n\n      if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n        return true;\n      } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n      // then format matching starts narrowing down the list of possible formats\n      // (only previously matched formats are considered for next digits).\n\n\n      leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n      var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Brackets are required for `^` to be applied to\n      // all or-ed (`|`) parts, not just the first one.\n\n      return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format, international) {\n      return international ? format.internationalFormat() : format.format();\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat(state) {\n      var _this4 = this;\n\n      var _loop2 = function _loop2() {\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) return \"break\";\n          _ref5 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) return \"break\";\n          _ref5 = _i2.value;\n        }\n\n        var format = _ref5;\n\n        // If this format is currently being used\n        // and is still suitable, then stick to it.\n        if (_this4.chosenFormat === format) {\n          return \"break\";\n        } // Sometimes, a formatting rule inserts additional digits in a phone number,\n        // and \"as you type\" formatter can't do that: it should only use the digits\n        // that the user has input.\n        //\n        // For example, in Argentina, there's a format for mobile phone numbers:\n        //\n        // {\n        //    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n        //    \"leading_digits_patterns\": [\"91\"],\n        //    \"national_prefix_formatting_rule\": \"0$1\",\n        //    \"format\": \"$2 15-$3-$4\",\n        //    \"international_format\": \"$1 $2 $3-$4\"\n        // }\n        //\n        // In that format, `international_format` is used instead of `format`\n        // because `format` inserts `15` in the formatted number,\n        // and `AsYouType` formatter should only use the digits\n        // the user has actually input, without adding any extra digits.\n        // In this case, it wouldn't make a difference, because the `15`\n        // is first stripped when applying `national_prefix_for_parsing`\n        // and then re-added when using `format`, so in reality it doesn't\n        // add any new digits to the number, but to detect that, the code\n        // would have to be more complex: it would have to try formatting\n        // the digits using the format and then see if any digits have\n        // actually been added or removed, and then, every time a new digit\n        // is input, it should re-check whether the chosen format doesn't\n        // alter the digits.\n        //\n        // Google's code doesn't go that far, and so does this library:\n        // it simply requires that a `format` doesn't add any additonal\n        // digits to user's input.\n        //\n        // Also, people in general should move from inputting phone numbers\n        // in national format (possibly with national prefixes)\n        // and use international phone number format instead:\n        // it's a logical thing in the modern age of mobile phones,\n        // globalization and the internet.\n        //\n\n        /* istanbul ignore if */\n\n\n        if (!NON_ALTERING_FORMAT_REG_EXP.test(_this4.getFormatFormat(format, state.international))) {\n          return \"continue\";\n        }\n\n        if (!_this4.createTemplateForFormat(format, state)) {\n          // Remove the format if it can't generate a template.\n          _this4.matchingFormats = _this4.matchingFormats.filter(function (_) {\n            return _ !== format;\n          });\n          return \"continue\";\n        }\n\n        _this4.chosenFormat = format;\n        return \"break\";\n      };\n\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      _loop: for (var _iterator2 = this.matchingFormats.slice(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref5;\n\n        var _ret = _loop2();\n\n        switch (_ret) {\n          case \"break\":\n            break _loop;\n\n          case \"continue\":\n            continue;\n        }\n      }\n\n      if (!this.chosenFormat) {\n        // No format matches the national (significant) phone number.\n        this.resetFormat();\n      }\n\n      return this.chosenFormat;\n    }\n  }, {\n    key: \"createTemplateForFormat\",\n    value: function createTemplateForFormat(format, state) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForFormat(format, state); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (template) {\n        this.setNationalNumberTemplate(template, state);\n        return true;\n      }\n    }\n  }, {\n    key: \"getInternationalPrefixBeforeCountryCallingCode\",\n    value: function getInternationalPrefixBeforeCountryCallingCode(_ref6, options) {\n      var IDDPrefix = _ref6.IDDPrefix,\n          missingPlus = _ref6.missingPlus;\n\n      if (IDDPrefix) {\n        return options && options.spacing === false ? IDDPrefix : IDDPrefix + ' ';\n      }\n\n      if (missingPlus) {\n        return '';\n      }\n\n      return '+';\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(state) {\n      if (!this.template) {\n        return;\n      } // `this.template` holds the template for a \"complete\" phone number.\n      // The currently entered phone number is most likely not \"complete\",\n      // so trim all non-populated digits.\n\n\n      var index = -1;\n      var i = 0;\n      var internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, {\n        spacing: false\n      }) : '';\n\n      while (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }, {\n    key: \"setNationalNumberTemplate\",\n    value: function setNationalNumberTemplate(template, state) {\n      this.nationalNumberTemplate = template;\n      this.populatedNationalNumberTemplate = template; // With a new formatting template, the matched position\n      // using the old template needs to be reset.\n\n      this.populatedNationalNumberTemplatePosition = -1; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (state.international) {\n        this.template = this.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, state.callingCode.length) + ' ' + template;\n      } else {\n        this.template = template;\n      }\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplateForFormat\",\n    value: function getTemplateForFormat(format, _ref7) {\n      var nationalSignificantNumber = _ref7.nationalSignificantNumber,\n          international = _ref7.international,\n          nationalPrefix = _ref7.nationalPrefix,\n          complexPrefixBeforeNationalSignificantNumber = _ref7.complexPrefixBeforeNationalSignificantNumber;\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (nationalSignificantNumber.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalSignificantNumber : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalSignificantNumber`\n      // is used instead of `digits`.\n\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n\n      var numberFormat = this.getFormatFormat(format, international);\n      var nationalPrefixIncludedInTemplate; // If a user did input a national prefix (and that's guaranteed),\n      // and if a `format` does have a national prefix formatting rule,\n      // then see if that national prefix formatting rule\n      // prepends exactly the same national prefix the user has input.\n      // If that's the case, then use the `format` with the national prefix formatting rule.\n      // Otherwise, use  the `format` without the national prefix formatting rule,\n      // and prepend a national prefix manually to it.\n\n      if (this.shouldTryNationalPrefixFormattingRule(format, {\n        international: international,\n        nationalPrefix: nationalPrefix\n      })) {\n        var numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()); // If `national_prefix_formatting_rule` of a `format` simply prepends\n        // national prefix at the start of a national (significant) number,\n        // then such formatting can be used with `AsYouType` formatter.\n        // There seems to be no `else` case: everywhere in metadata,\n        // national prefix formatting rule is national prefix + $1,\n        // or `($1)`, in which case such format isn't even considered\n        // when the user has input a national prefix.\n\n        /* istanbul ignore else */\n\n        if (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\n          numberFormat = numberFormatWithNationalPrefix;\n          nationalPrefixIncludedInTemplate = true; // Replace all digits of the national prefix in the formatting template\n          // with `DIGIT_PLACEHOLDER`s.\n\n          if (nationalPrefix) {\n            var i = nationalPrefix.length;\n\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER); // If a prefix of a national (significant) number is not as simple\n      // as just a basic national prefix, then just prepend such prefix\n      // before the national (significant) number, optionally spacing\n      // the two with a whitespace.\n\n      if (!nationalPrefixIncludedInTemplate) {\n        if (complexPrefixBeforeNationalSignificantNumber) {\n          // Prepend the prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) + ' ' + template;\n        } else if (nationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n\n      if (international) {\n        template = applyInternationalSeparatorStyle(template);\n      }\n\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      var result = populateTemplateWithDigits(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, digits);\n\n      if (!result) {\n        // Reset the format.\n        this.resetFormat();\n        return;\n      }\n\n      this.populatedNationalNumberTemplate = result[0];\n      this.populatedNationalNumberTemplatePosition = result[1]; // Return the formatted phone number so far.\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }]);\n\n  return AsYouTypeFormatter;\n}();\n\nexport { AsYouTypeFormatter as default };\n//# sourceMappingURL=AsYouTypeFormatter.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport _extractCountryCallingCode from './helpers/extractCountryCallingCode';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign';\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber';\nimport stripIddPrefix from './helpers/stripIddPrefix';\nimport parseDigits from './helpers/parseDigits';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART = '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i');\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '(?:' + '[' + PLUS_CHARS + ']' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*' + '|' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + '.*' + '$'); // Tests whether `national_prefix_for_parsing` could match\n// different national prefixes.\n// Matches anything that's not a digit or a square bracket.\n\nvar COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/;\n\nvar AsYouTypeParser =\n/*#__PURE__*/\nfunction () {\n  function AsYouTypeParser(_ref) {\n    var defaultCountry = _ref.defaultCountry,\n        defaultCallingCode = _ref.defaultCallingCode,\n        metadata = _ref.metadata,\n        onNationalSignificantNumberChange = _ref.onNationalSignificantNumberChange;\n\n    _classCallCheck(this, AsYouTypeParser);\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.metadata = metadata;\n    this.onNationalSignificantNumberChange = onNationalSignificantNumberChange;\n  }\n\n  _createClass(AsYouTypeParser, [{\n    key: \"input\",\n    value: function input(text, state) {\n      var _extractFormattedDigi = extractFormattedDigitsAndPlus(text),\n          _extractFormattedDigi2 = _slicedToArray(_extractFormattedDigi, 2),\n          formattedDigits = _extractFormattedDigi2[0],\n          hasPlus = _extractFormattedDigi2[1];\n\n      var digits = parseDigits(formattedDigits); // Checks for a special case: just a leading `+` has been entered.\n\n      var justLeadingPlus;\n\n      if (hasPlus) {\n        if (!state.digits) {\n          state.startInternationalNumber();\n\n          if (!digits) {\n            justLeadingPlus = true;\n          }\n        }\n      }\n\n      if (digits) {\n        this.inputDigits(digits, state);\n      }\n\n      return {\n        digits: digits,\n        justLeadingPlus: justLeadingPlus\n      };\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits, state) {\n      var digits = state.digits;\n      var hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3; // Append phone number digits.\n\n      state.appendDigits(nextDigits); // Attempt to extract IDD prefix:\n      // Some users input their phone number in international format,\n      // but in an \"out-of-country\" dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers as soon as there're at least 3 digits.\n      // Google's library attempts to extract IDD prefix at 3 digits,\n      // so this library just copies that behavior.\n      // I guess that's because the most commot IDD prefixes are\n      // `00` (Europe) and `011` (US).\n      // There exist really long IDD prefixes too:\n      // for example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      // An IDD prefix is extracted here, and then every time when\n      // there's a new digit and the number couldn't be formatted.\n\n      if (hasReceivedThreeLeadingDigits) {\n        this.extractIddPrefix(state);\n      }\n\n      if (this.isWaitingForCountryCallingCode(state)) {\n        if (!this.extractCountryCallingCode(state)) {\n          return;\n        }\n      } else {\n        state.appendNationalSignificantNumberDigits(nextDigits);\n      } // If a phone number is being input in international format,\n      // then it's not valid for it to have a national prefix.\n      // Still, some people incorrectly input such numbers with a national prefix.\n      // In such cases, only attempt to strip a national prefix if the number becomes too long.\n      // (but that is done later, not here)\n\n\n      if (!state.international) {\n        if (!this.hasExtractedNationalSignificantNumber) {\n          this.extractNationalSignificantNumber(state.getNationalDigits(), state.update);\n        }\n      }\n    }\n  }, {\n    key: \"isWaitingForCountryCallingCode\",\n    value: function isWaitingForCountryCallingCode(_ref2) {\n      var international = _ref2.international,\n          callingCode = _ref2.callingCode;\n      return international && !callingCode;\n    } // Extracts a country calling code from a number\n    // being entered in internatonal format.\n\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode(state) {\n      var _extractCountryCallin = _extractCountryCallingCode('+' + state.getDigitsWithoutInternationalPrefix(), this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (countryCallingCode) {\n        state.setCallingCode(countryCallingCode);\n        state.update({\n          nationalSignificantNumber: number\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan) {\n      if (numberingPlan) {\n        this.hasSelectedNumberingPlan = true;\n\n        var nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing();\n\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing);\n      } else {\n        this.hasSelectedNumberingPlan = undefined;\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = undefined;\n      }\n    }\n    /**\r\n     * Extracts a national (significant) number from user input.\r\n     * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n     * and doesn't apply `national_prefix_transform_rule` after that.\r\n     * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n     * @return {boolean} [extracted]\r\n     */\n\n  }, {\n    key: \"extractNationalSignificantNumber\",\n    value: function extractNationalSignificantNumber(nationalDigits, setState) {\n      if (!this.hasSelectedNumberingPlan) {\n        return;\n      }\n\n      var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe.nationalPrefix,\n          nationalNumber = _extractNationalNumbe.nationalNumber,\n          carrierCode = _extractNationalNumbe.carrierCode;\n\n      if (nationalNumber === nationalDigits) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n    /**\r\n     * In Google's code this function is called \"attempt to extract longer NDD\".\r\n     * \"Some national prefixes are a substring of others\", they say.\r\n     * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n     */\n\n  }, {\n    key: \"extractAnotherNationalSignificantNumber\",\n    value: function extractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\n      if (!this.hasExtractedNationalSignificantNumber) {\n        return this.extractNationalSignificantNumber(nationalDigits, setState);\n      }\n\n      if (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\n        return;\n      }\n\n      var _extractNationalNumbe2 = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe2.nationalPrefix,\n          nationalNumber = _extractNationalNumbe2.nationalNumber,\n          carrierCode = _extractNationalNumbe2.carrierCode; // If a national prefix has been extracted previously,\n      // then it's always extracted as additional digits are added.\n      // That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\n      // doesn't do anything different from what it currently does.\n      // So, just in case, here's this check, though it doesn't occur.\n\n      /* istanbul ignore if */\n\n\n      if (nationalNumber === prevNationalSignificantNumber) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n  }, {\n    key: \"onExtractedNationalNumber\",\n    value: function onExtractedNationalNumber(nationalPrefix, carrierCode, nationalSignificantNumber, nationalDigits, setState) {\n      var complexPrefixBeforeNationalSignificantNumber;\n      var nationalSignificantNumberMatchesInput; // This check also works with empty `this.nationalSignificantNumber`.\n\n      var nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber); // If the extracted national (significant) number is the\n      // last substring of the `digits`, then it means that it hasn't been altered:\n      // no digits have been removed from the national (significant) number\n      // while applying `national_prefix_transform_rule`.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n\n      if (nationalSignificantNumberIndex >= 0 && nationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\n        nationalSignificantNumberMatchesInput = true; // If a prefix of a national (significant) number is not as simple\n        // as just a basic national prefix, then such prefix is stored in\n        // `this.complexPrefixBeforeNationalSignificantNumber` property and will be\n        // prepended \"as is\" to the national (significant) number to produce\n        // a formatted result.\n\n        var prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex); // `prefixBeforeNationalNumber` is always non-empty,\n        // because `onExtractedNationalNumber()` isn't called\n        // when a national (significant) number hasn't been actually \"extracted\":\n        // when a national (significant) number is equal to the national part of `digits`,\n        // then `onExtractedNationalNumber()` doesn't get called.\n\n        if (prefixBeforeNationalNumber !== nationalPrefix) {\n          complexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber;\n        }\n      }\n\n      setState({\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode,\n        nationalSignificantNumber: nationalSignificantNumber,\n        nationalSignificantNumberMatchesInput: nationalSignificantNumberMatchesInput,\n        complexPrefixBeforeNationalSignificantNumber: complexPrefixBeforeNationalSignificantNumber\n      }); // `onExtractedNationalNumber()` is only called when\n      // the national (significant) number actually did change.\n\n      this.hasExtractedNationalSignificantNumber = true;\n      this.onNationalSignificantNumberChange();\n    }\n  }, {\n    key: \"reExtractNationalSignificantNumber\",\n    value: function reExtractNationalSignificantNumber(state) {\n      // Attempt to extract a national prefix.\n      //\n      // Some people incorrectly input national prefix\n      // in an international phone number.\n      // For example, some people write British phone numbers as `+44(0)...`.\n      //\n      // Also, in some rare cases, it is valid for a national prefix\n      // to be a part of an international phone number.\n      // For example, mobile phone numbers in Mexico are supposed to be\n      // dialled internationally using a `1` national prefix,\n      // so the national prefix will be part of an international number.\n      //\n      // Quote from:\n      // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n      //\n      // \"Dialing a Mexican cell phone from abroad\n      // When you are calling a cell phone number in Mexico from outside Mexico,\n      // it’s necessary to dial an additional “1” after Mexico’s country code\n      // (which is “52”) and before the area code.\n      // You also ignore the 045, and simply dial the area code and the\n      // cell phone’s number.\n      //\n      // If you don’t add the “1”, you’ll receive a recorded announcement\n      // asking you to redial using it.\n      //\n      // For example, if you are calling from the USA to a cell phone\n      // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n      // (Note that this is different to calling a land line in Mexico City\n      // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n      //\n      // Google's demo output:\n      // https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\n      //\n      if (this.extractAnotherNationalSignificantNumber(state.getNationalDigits(), state.nationalSignificantNumber, state.update)) {\n        return true;\n      } // If no format matches the phone number, then it could be\n      // \"a really long IDD\" (quote from a comment in Google's library).\n      // An IDD prefix is first extracted when the user has entered at least 3 digits,\n      // and then here — every time when there's a new digit and the number\n      // couldn't be formatted.\n      // For example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      //\n      // Could also check `!hasReceivedThreeLeadingDigits` here\n      // to filter out the case when this check duplicates the one\n      // already performed when there're 3 leading digits,\n      // but it's not a big deal, and in most cases there\n      // will be a suitable `format` when there're 3 leading digits.\n      //\n\n\n      if (this.extractIddPrefix(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      } // Google's AsYouType formatter supports sort of an \"autocorrection\" feature\n      // when it \"autocorrects\" numbers that have been input for a country\n      // with that country's calling code.\n      // Such \"autocorrection\" feature looks weird, but different people have been requesting it:\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      // https://github.com/catamphetamine/libphonenumber-js/issues/375\n      // https://github.com/catamphetamine/libphonenumber-js/issues/316\n\n\n      if (this.fixMissingPlus(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"extractIddPrefix\",\n    value: function extractIddPrefix(state) {\n      // An IDD prefix can't be present in a number written with a `+`.\n      // Also, don't re-extract an IDD prefix if has already been extracted.\n      var international = state.international,\n          IDDPrefix = state.IDDPrefix,\n          digits = state.digits,\n          nationalSignificantNumber = state.nationalSignificantNumber;\n\n      if (international || IDDPrefix) {\n        return;\n      } // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n\n\n      var numberWithoutIDD = stripIddPrefix(digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n\n      if (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\n        // If an IDD prefix was stripped then convert the IDD-prefixed number\n        // to international number for subsequent parsing.\n        state.update({\n          IDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\n        });\n        this.startInternationalNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"fixMissingPlus\",\n    value: function fixMissingPlus(state) {\n      if (!state.international) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(state.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n            newCallingCode = _extractCountryCallin2.countryCallingCode,\n            number = _extractCountryCallin2.number;\n\n        if (newCallingCode) {\n          state.update({\n            missingPlus: true\n          });\n          this.startInternationalNumber(state);\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(state) {\n      state.startInternationalNumber(); // If a national (significant) number has been extracted before, reset it.\n\n      if (state.nationalSignificantNumber) {\n        state.resetNationalSignificantNumber();\n        this.onNationalSignificantNumberChange();\n        this.hasExtractedNationalSignificantNumber = undefined;\n      }\n    }\n  }, {\n    key: \"extractCallingCodeAndNationalSignificantNumber\",\n    value: function extractCallingCodeAndNationalSignificantNumber(state) {\n      if (this.extractCountryCallingCode(state)) {\n        // `this.extractCallingCode()` is currently called when the number\n        // couldn't be formatted during the standard procedure.\n        // Normally, the national prefix would be re-extracted\n        // for an international number if such number couldn't be formatted,\n        // but since it's already not able to be formatted,\n        // there won't be yet another retry, so also extract national prefix here.\n        this.extractNationalSignificantNumber(state.getNationalDigits(), state.update);\n      }\n    }\n  }]);\n\n  return AsYouTypeParser;\n}();\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\n\nexport { AsYouTypeParser as default };\n\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART);\n\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n\n  return text;\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nfunction _extractFormattedDigitsAndPlus(text) {\n  // Extract a formatted phone number part from text.\n  var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n  if (extractedNumber[0] === '+') {\n    return [extractedNumber.slice('+'.length), true];\n  }\n\n  return [extractedNumber];\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nexport function extractFormattedDigitsAndPlus(text) {\n  var _extractFormattedDigi3 = _extractFormattedDigitsAndPlus(text),\n      _extractFormattedDigi4 = _slicedToArray(_extractFormattedDigi3, 2),\n      formattedDigits = _extractFormattedDigi4[0],\n      hasPlus = _extractFormattedDigi4[1]; // If the extracted phone number part\n  // can possibly be a part of some valid phone number\n  // then parse phone number characters from a formatted phone number.\n\n\n  if (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\n    formattedDigits = '';\n  }\n\n  return [formattedDigits, hasPlus];\n}\n//# sourceMappingURL=AsYouTypeParser.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport Metadata from './metadata';\nimport PhoneNumber from './PhoneNumber';\nimport AsYouTypeState from './AsYouTypeState';\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter';\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar AsYouType =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    this.metadata = new Metadata(metadata);\n\n    var _this$getCountryAndCa = this.getCountryAndCallingCode(optionsOrDefaultCountry),\n        _this$getCountryAndCa2 = _slicedToArray(_this$getCountryAndCa, 2),\n        defaultCountry = _this$getCountryAndCa2[0],\n        defaultCallingCode = _this$getCountryAndCa2[1];\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.reset();\n  }\n\n  _createClass(AsYouType, [{\n    key: \"getCountryAndCallingCode\",\n    value: function getCountryAndCallingCode(optionsOrDefaultCountry) {\n      // Set `defaultCountry` and `defaultCallingCode` options.\n      var defaultCountry;\n      var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n      if (optionsOrDefaultCountry) {\n        if (_typeof(optionsOrDefaultCountry) === 'object') {\n          defaultCountry = optionsOrDefaultCountry.defaultCountry;\n          defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n        } else {\n          defaultCountry = optionsOrDefaultCountry;\n        }\n      }\n\n      if (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\n        defaultCountry = undefined;\n      }\n\n      if (defaultCallingCode) {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            defaultCountry = '001';\n          }\n        }\n      }\n\n      return [defaultCountry, defaultCallingCode];\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var _this$parser$input = this.parser.input(text, this.state),\n          digits = _this$parser$input.digits,\n          justLeadingPlus = _this$parser$input.justLeadingPlus;\n\n      if (justLeadingPlus) {\n        this.formattedOutput = '+';\n      } else if (digits) {\n        this.determineTheCountryIfNeeded(); // Match the available formats by the currently available leading digits.\n\n        if (this.state.nationalSignificantNumber) {\n          this.formatter.narrowDownMatchingFormats(this.state);\n        }\n\n        var formattedNationalNumber;\n\n        if (this.metadata.hasSelectedNumberingPlan()) {\n          formattedNationalNumber = this.formatter.format(digits, this.state);\n        }\n\n        if (formattedNationalNumber === undefined) {\n          // See if another national (significant) number could be re-extracted.\n          if (this.parser.reExtractNationalSignificantNumber(this.state)) {\n            this.determineTheCountryIfNeeded(); // If it could, then re-try formatting the new national (significant) number.\n\n            var nationalDigits = this.state.getNationalDigits();\n\n            if (nationalDigits) {\n              formattedNationalNumber = this.formatter.format(nationalDigits, this.state);\n            }\n          }\n        }\n\n        this.formattedOutput = formattedNationalNumber ? this.getFullNumber(formattedNationalNumber) : this.getNonFormattedNumber();\n      }\n\n      return this.formattedOutput;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n\n      this.state = new AsYouTypeState({\n        onCountryChange: function onCountryChange(country) {\n          // Before version `1.6.0`, the official `AsYouType` formatter API\n          // included the `.country` property of an `AsYouType` instance.\n          // Since that property (along with the others) have been moved to\n          // `this.state`, `this.country` property is emulated for compatibility\n          // with the old versions.\n          _this.country = country;\n        },\n        onCallingCodeChange: function onCallingCodeChange(country, callingCode) {\n          _this.metadata.selectNumberingPlan(country, callingCode);\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n\n          _this.parser.reset(_this.metadata.numberingPlan);\n        }\n      });\n      this.formatter = new AsYouTypeFormatter({\n        state: this.state,\n        metadata: this.metadata\n      });\n      this.parser = new AsYouTypeParser({\n        defaultCountry: this.defaultCountry,\n        defaultCallingCode: this.defaultCallingCode,\n        metadata: this.metadata,\n        state: this.state,\n        onNationalSignificantNumberChange: function onNationalSignificantNumberChange() {\n          _this.determineTheCountryIfNeeded();\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n        }\n      });\n      this.state.reset(this.defaultCountry, this.defaultCallingCode);\n      this.formattedOutput = '';\n      return this;\n    }\n    /**\r\n     * Returns `true` if the phone number is being input in international format.\r\n     * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.state.international;\n    }\n    /**\r\n     * Returns the \"country calling code\" part of the phone number.\r\n     * Returns `undefined` if the number is not being input in international format.\r\n     * Returns \"country calling code\" for \"non-geographic\" phone numbering plans too.\r\n     * @return {string} [callingCode]\r\n     */\n\n  }, {\n    key: \"getCallingCode\",\n    value: function getCallingCode() {\n      return this.state.callingCode;\n    } // A legacy alias.\n\n  }, {\n    key: \"getCountryCallingCode\",\n    value: function getCountryCallingCode() {\n      return this.getCallingCode();\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * Returns `undefined` if no phone number has been input yet.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"getCountry\",\n    value: function getCountry() {\n      var _this$state = this.state,\n          digits = _this$state.digits,\n          country = _this$state.country; // If no digits have been input yet,\n      // then `this.country` is the `defaultCountry`.\n      // Won't return the `defaultCountry` in such case.\n\n      if (!digits) {\n        return;\n      }\n\n      var countryCode = country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        // `AsYouType.getCountry()` returns `undefined`\n        // for \"non-geographic\" phone numbering plans.\n        if (countryCode === '001') {\n          countryCode = undefined;\n        }\n      }\n\n      return countryCode;\n    }\n  }, {\n    key: \"determineTheCountryIfNeeded\",\n    value: function determineTheCountryIfNeeded() {\n      // Suppose a user enters a phone number in international format,\n      // and there're several countries corresponding to that country calling code,\n      // and a country has been derived from the number, and then\n      // a user enters one more digit and the number is no longer\n      // valid for the derived country, so the country should be re-derived\n      // on every new digit in those cases.\n      //\n      // If the phone number is being input in national format,\n      // then it could be a case when `defaultCountry` wasn't specified\n      // when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\n      // and that \"calling code\" could correspond to a \"non-geographic entity\",\n      // or there could be several countries corresponding to that country calling code.\n      // In those cases, `this.country` is `undefined` and should be derived\n      // from the number. Again, if country calling code is ambiguous, then\n      // `this.country` should be re-derived with each new digit.\n      //\n      if (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\n        this.determineTheCountry();\n      }\n    } // Prepends `+CountryCode ` in case of an international phone number\n\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      var _this2 = this;\n\n      if (this.isInternational()) {\n        var prefix = function prefix(text) {\n          return _this2.formatter.getInternationalPrefixBeforeCountryCallingCode(_this2.state, {\n            spacing: text ? true : false\n          }) + text;\n        };\n\n        var callingCode = this.state.callingCode;\n\n        if (!callingCode) {\n          return prefix(\"\".concat(this.state.getDigitsWithoutInternationalPrefix()));\n        }\n\n        if (!formattedNationalNumber) {\n          return prefix(callingCode);\n        }\n\n        return prefix(\"\".concat(callingCode, \" \").concat(formattedNationalNumber));\n      }\n\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumberWithPrefix\",\n    value: function getNonFormattedNationalNumberWithPrefix() {\n      var _this$state2 = this.state,\n          nationalSignificantNumber = _this$state2.nationalSignificantNumber,\n          complexPrefixBeforeNationalSignificantNumber = _this$state2.complexPrefixBeforeNationalSignificantNumber,\n          nationalPrefix = _this$state2.nationalPrefix;\n      var number = nationalSignificantNumber;\n      var prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix;\n\n      if (prefix) {\n        number = prefix + number;\n      }\n\n      return number;\n    }\n  }, {\n    key: \"getNonFormattedNumber\",\n    value: function getNonFormattedNumber() {\n      var nationalSignificantNumberMatchesInput = this.state.nationalSignificantNumberMatchesInput;\n      return this.getFullNumber(nationalSignificantNumberMatchesInput ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      var number = this.getNonFormattedNumber();\n\n      if (number) {\n        return number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n      }\n    }\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var callingCode = this.state.callingCode;\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode);\n      return countryCodes && countryCodes.length > 1;\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.state.setCountry(getCountryByCallingCode(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, this.state.nationalSignificantNumber, this.metadata));\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      var _this$state3 = this.state,\n          nationalSignificantNumber = _this$state3.nationalSignificantNumber,\n          carrierCode = _this$state3.carrierCode;\n\n      if (this.isInternational()) {\n        if (!this.state.callingCode) {\n          return;\n        }\n      } else {\n        if (!this.state.country && !this.defaultCallingCode) {\n          return;\n        }\n      }\n\n      if (!nationalSignificantNumber) {\n        return;\n      }\n\n      var countryCode = this.getCountry();\n      var callingCode = this.getCountryCallingCode() || this.defaultCallingCode;\n      var phoneNumber = new PhoneNumber(countryCode || callingCode, nationalSignificantNumber, this.metadata.metadata);\n\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    }\n    /**\r\n     * Returns `true` if the phone number is \"possible\".\r\n     * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isPossible();\n    }\n    /**\r\n     * Returns `true` if the phone number is \"valid\".\r\n     * Is just a shortcut for `PhoneNumber.isValid()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isValid();\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.state.nationalSignificantNumber;\n    }\n    /**\r\n     * Returns the phone number characters entered by the user.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getChars\",\n    value: function getChars() {\n      return (this.state.international ? '+' : '') + this.state.digits;\n    }\n    /**\r\n     * Returns the template for the formatted phone number.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || '';\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexport { AsYouType as default };\n//# sourceMappingURL=AsYouType.js.map","import Metadata from './metadata';\nexport default function getCountries(metadata) {\n  return new Metadata(metadata).getCountries();\n}\n//# sourceMappingURL=getCountries.js.map","import { getCountryCallingCode } from 'libphonenumber-js/core';\nexport function getInputValuePrefix(_ref) {\n  var country = _ref.country,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      metadata = _ref.metadata;\n  return country && international && !withCountryCallingCode ? \"+\".concat(getCountryCallingCode(country, metadata)) : '';\n}\nexport function removeInputValuePrefix(value, prefix) {\n  if (prefix) {\n    value = value.slice(prefix.length);\n\n    if (value[0] === ' ') {\n      value = value.slice(1);\n    }\n  }\n\n  return value;\n}\n//# sourceMappingURL=inputValuePrefix.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from 'input-format/react';\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix';\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\n\nexport function createInput(defaultMetadata) {\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        metadata = _ref.metadata,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"international\", \"withCountryCallingCode\", \"metadata\"]);\n\n    var format = useCallback(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType(country, metadata);\n      var prefix = getInputValuePrefix({\n        country: country,\n        international: international,\n        withCountryCallingCode: withCountryCallingCode,\n        metadata: metadata\n      }); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n\n      if (prefix) {\n        text = removeInputValuePrefix(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = removeInputValuePrefix(template, prefix);\n        }\n      }\n\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      parse: parsePhoneNumberCharacter,\n      format: format\n    }));\n  }\n\n  InputSmart = React.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\nexport default createInput();\n//# sourceMappingURL=InputSmart.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n   * but still works good enough. When erasing or inserting digits in the middle\r\n   * of a phone number the caret usually jumps to the end: this is the expected\r\n   * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n        onChange = _ref.onChange,\n        country = _ref.country,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        metadata = _ref.metadata,\n        Input = _ref.inputComponent,\n        rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"country\", \"international\", \"withCountryCallingCode\", \"metadata\", \"inputComponent\"]);\n\n    var prefix = getInputValuePrefix({\n      country: country,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      metadata: metadata\n    });\n\n    var _onChange = useCallback(function (event) {\n      var newValue = parseIncompletePhoneNumber(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n\n  InputBasic = React.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\r\n     * Updates the `value`.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\nexport default createInput();\n\nfunction format(prefix, value, country, metadata) {\n  return removeInputValuePrefix(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}\n//# sourceMappingURL=InputBasic.js.map","import AsYouType from './AsYouType';\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\n\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n\n  return new AsYouType(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'; // Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\n\nexport default function FlagComponent(_ref) {\n  var country = _ref.country,\n      countryName = _ref.countryName,\n      flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      rest = _objectWithoutProperties(_ref, [\"country\", \"countryName\", \"flags\", \"flagUrl\"]);\n\n  if (flags && flags[country]) {\n    return flags[country]({\n      title: countryName\n    });\n  }\n\n  return React.createElement(\"img\", _extends({}, rest, {\n    alt: countryName,\n    role: countryName ? undefined : \"presentation\",\n    src: flagUrl.replace('{XX}', country).replace('{xx}', country.toLowerCase())\n  }));\n}\nFlagComponent.propTypes = {\n  // The country to be selected by default.\n  // Two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: PropTypes.string.isRequired,\n  // Will be HTML `title` attribute of the `<img/>`.\n  countryName: PropTypes.string.isRequired,\n  // Country flag icon components.\n  // By default flag icons are inserted as `<img/>`s\n  // with their `src` pointed to `country-flag-icons` gitlab pages website.\n  // There might be cases (e.g. an offline application)\n  // where having a large (3 megabyte) `<svg/>` flags\n  // bundle is more appropriate.\n  // `import flags from 'react-phone-number-input/flags'`.\n  flags: PropTypes.objectOf(PropTypes.elementType),\n  // A URL for a country flag icon.\n  // By default it points to `country-flag-icons` gitlab pages website.\n  flagUrl: PropTypes.string.isRequired\n};\n//# sourceMappingURL=Flag.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nexport default function InternationalIcon(_ref) {\n  var aspectRatio = _ref.aspectRatio,\n      rest = _objectWithoutProperties(_ref, [\"aspectRatio\"]);\n\n  if (aspectRatio === 1) {\n    return React.createElement(InternationalIcon1x1, rest);\n  } else {\n    return React.createElement(InternationalIcon3x2, rest);\n  }\n}\nInternationalIcon.propTypes = {\n  title: PropTypes.string.isRequired,\n  aspectRatio: PropTypes.number\n}; // 3x2.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon3x2(_ref2) {\n  var title = _ref2.title,\n      rest = _objectWithoutProperties(_ref2, [\"title\"]);\n\n  return React.createElement(\"svg\", _extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 75 50\"\n  }), React.createElement(\"title\", null, title), React.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeMiterlimit: \"10\"\n  }, React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"\n  }), React.createElement(\"path\", {\n    d: \"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"\n  }), React.createElement(\"line\", {\n    x1: \"26\",\n    y1: \"25\",\n    x2: \"74\",\n    y2: \"25\"\n  }), React.createElement(\"line\", {\n    x1: \"50\",\n    y1: \"1\",\n    x2: \"50\",\n    y2: \"49\"\n  }), React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"\n  }), React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"\n  })), React.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"none\",\n    fill: \"currentColor\",\n    d: \"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"\n  }));\n}\n\nInternationalIcon3x2.propTypes = {\n  title: PropTypes.string.isRequired\n}; // 1x1.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon1x1(_ref3) {\n  var title = _ref3.title,\n      rest = _objectWithoutProperties(_ref3, [\"title\"]);\n\n  return React.createElement(\"svg\", _extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\"\n  }), React.createElement(\"title\", null, title), React.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\"\n  }, React.createElement(\"path\", {\n    d: \"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"\n  }), React.createElement(\"path\", {\n    d: \"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"\n  }), React.createElement(\"path\", {\n    d: \"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"\n  }), React.createElement(\"path\", {\n    d: \"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"\n  }), React.createElement(\"line\", {\n    x1: \"27.8\",\n    y1: \"0.85\",\n    x2: \"27.8\",\n    y2: \"34.61\"\n  }), React.createElement(\"line\", {\n    x1: \"15.2\",\n    y1: \"22.23\",\n    x2: \"49.15\",\n    y2: \"22.23\"\n  })), React.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"transparent\",\n    fill: \"currentColor\",\n    d: \"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"\n  }));\n}\n\nInternationalIcon1x1.propTypes = {\n  title: PropTypes.string.isRequired\n};\n//# sourceMappingURL=InternationalIcon.js.map","import { isSupportedCountry } from 'libphonenumber-js/core';\nexport { getCountries } from 'libphonenumber-js/core';\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\n\nexport function sortCountryOptions(options, order) {\n  if (!order) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  for (var _iterator = order, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      (function () {\n        var countryCode = void 0;\n\n        if (element === '🌐') {\n          countryCode = undefined;\n        } else {\n          countryCode = element;\n        } // Find the position of the option.\n\n\n        var index = options.indexOf(options.filter(function (option) {\n          return option.value === countryCode;\n        })[0]); // Get the option.\n\n        var option = options[index]; // Remove the option from its default position.\n\n        options.splice(index, 1); // Add the option on top.\n\n        appendTo.push(option);\n      })();\n    }\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\nexport function getSupportedCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (option) {\n      switch (option) {\n        case '🌐':\n        case '|':\n        case '...':\n        case '…':\n          return true;\n\n        default:\n          return isCountrySupportedWithError(option, metadata);\n      }\n    });\n\n    if (countryOptions.length > 0) {\n      return countryOptions;\n    }\n  }\n}\nexport function isCountrySupportedWithError(country, metadata) {\n  if (isSupportedCountry(country, metadata)) {\n    return true;\n  } else {\n    console.error(\"Country not found: \".concat(country));\n    return false;\n  }\n}\nexport function getSupportedCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n\n  return countries;\n}\n//# sourceMappingURL=countries.js.map","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport DefaultInternationalIcon from './InternationalIcon';\nimport Flag from './Flag';\nexport function createCountryIconComponent(_ref) {\n  var flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      FlagComponent = _ref.flagComponent,\n      InternationalIcon = _ref.internationalIcon;\n\n  function CountryIcon(_ref2) {\n    var country = _ref2.country,\n        label = _ref2.label,\n        aspectRatio = _ref2.aspectRatio;\n\n    // `aspectRatio` is currently a hack for the default \"International\" icon\n    // to render it as a square when Unicode flag icons are used.\n    // So `aspectRatio` property is only used with the default \"International\" icon.\n    var _aspectRatio = InternationalIcon === DefaultInternationalIcon ? aspectRatio : undefined;\n\n    return React.createElement(\"div\", {\n      className: classNames('PhoneInputCountryIcon', {\n        'PhoneInputCountryIcon--square': _aspectRatio === 1,\n        'PhoneInputCountryIcon--border': country\n      })\n    }, country ? React.createElement(FlagComponent, {\n      country: country,\n      countryName: label,\n      flags: flags,\n      flagUrl: flagUrl,\n      className: \"PhoneInputCountryIconImg\"\n    }) : React.createElement(InternationalIcon, {\n      title: label,\n      aspectRatio: _aspectRatio,\n      className: \"PhoneInputCountryIconImg\"\n    }));\n  }\n\n  CountryIcon.propTypes = {\n    country: PropTypes.string,\n    label: PropTypes.string.isRequired,\n    aspectRatio: PropTypes.number\n  };\n  return CountryIcon;\n}\nexport default createCountryIconComponent({\n  // Must be equal to `defaultProps.flagUrl` in `./PhoneInputWithCountry.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n  flagComponent: Flag,\n  internationalIcon: DefaultInternationalIcon\n});\n//# sourceMappingURL=CountryIcon.js.map","import PropTypes from 'prop-types';\nexport var metadata = PropTypes.shape({\n  country_calling_codes: PropTypes.object.isRequired,\n  countries: PropTypes.object.isRequired\n});\nexport var labels = PropTypes.objectOf(PropTypes.string);\n//# sourceMappingURL=PropTypes.js.map","import { getCountryCallingCode, Metadata } from 'libphonenumber-js/core';\nvar ONLY_DIGITS_REGEXP = /^\\d+$/;\nexport default function getInternationalPhoneNumberPrefix(country, metadata) {\n  // Standard international phone number prefix: \"+\" and \"country calling code\".\n  var prefix = '+' + getCountryCallingCode(country, metadata); // Get \"leading digits\" for a phone number of the country.\n  // If there're \"leading digits\" then they can be part of the prefix too.\n\n  metadata = new Metadata(metadata);\n  metadata.country(country);\n\n  if (metadata.numberingPlan.leadingDigits() && ONLY_DIGITS_REGEXP.test(metadata.numberingPlan.leadingDigits())) {\n    prefix += metadata.numberingPlan.leadingDigits();\n  }\n\n  return prefix;\n}\n//# sourceMappingURL=getInternationalPhoneNumberPrefix.js.map","import { parsePhoneNumberFromString, getCountryCallingCode, AsYouType, Metadata } from 'libphonenumber-js/core';\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix';\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\n\nexport function getPreSelectedCountry(_ref) {\n  var value = _ref.value,\n      phoneNumber = _ref.phoneNumber,\n      defaultCountry = _ref.defaultCountry,\n      getAnyCountry = _ref.getAnyCountry,\n      countries = _ref.countries,\n      required = _ref.required,\n      metadata = _ref.metadata;\n  var country; // If can get country from E.164 phone number\n  // then it overrides the `country` passed (or not passed).\n\n  if (phoneNumber && phoneNumber.country) {\n    // `country` will be left `undefined` in case of non-detection.\n    country = phoneNumber.country;\n  } else if (defaultCountry) {\n    if (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\n      country = defaultCountry;\n    }\n  } // Only pre-select a country if it's in the available `countries` list.\n\n\n  if (countries && countries.indexOf(country) < 0) {\n    country = undefined;\n  } // If there will be no \"International\" option\n  // then some `country` must be selected.\n  // It will still be the wrong country though.\n  // But still country `<select/>` can't be left in a broken state.\n\n\n  if (!country && required && countries && countries.length > 0) {\n    country = getAnyCountry(); // noCountryMatchesTheNumber = true\n  }\n\n  return country;\n}\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\n\nexport function getCountrySelectOptions(_ref2) {\n  var countries = _ref2.countries,\n      countryNames = _ref2.countryNames,\n      addInternationalOption = _ref2.addInternationalOption,\n      compareStringsLocales = _ref2.compareStringsLocales,\n      _compareStrings = _ref2.compareStrings;\n\n  // Default country name comparator uses `String.localeCompare()`.\n  if (!_compareStrings) {\n    _compareStrings = compareStrings;\n  } // Generates a `<Select/>` option for each country.\n\n\n  var countrySelectOptions = countries.map(function (country) {\n    return {\n      value: country,\n      // All `locale` country names included in this library\n      // include all countries (this is checked at build time).\n      // The only case when a country name might be missing\n      // is when a developer supplies their own `labels` property.\n      // To guard against such cases, a missing country name\n      // is substituted by country code.\n      label: countryNames[country] || country\n    };\n  }); // Sort the list of countries alphabetically.\n\n  countrySelectOptions.sort(function (a, b) {\n    return _compareStrings(a.label, b.label, compareStringsLocales);\n  }); // Add the \"International\" option to the country list (if suitable)\n\n  if (addInternationalOption) {\n    countrySelectOptions.unshift({\n      label: countryNames.ZZ\n    });\n  }\n\n  return countrySelectOptions;\n}\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\n\nexport function parsePhoneNumber(value, metadata) {\n  return parsePhoneNumberFromString(value || '', metadata);\n}\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\n\nexport function generateNationalNumberDigits(phoneNumber) {\n  return phoneNumber.formatNational().replace(/\\D/g, '');\n}\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\n\nexport function getPhoneDigitsForNewCountry(phoneDigits, _ref3) {\n  var prevCountry = _ref3.prevCountry,\n      newCountry = _ref3.newCountry,\n      metadata = _ref3.metadata,\n      useNationalFormat = _ref3.useNationalFormat;\n\n  // If `parsed_input` is empty\n  // then no need to migrate anything.\n  if (!phoneDigits) {\n    if (useNationalFormat) {\n      return '';\n    } else {\n      // If `phoneDigits` is empty then set `phoneDigits` to\n      // `+{getCountryCallingCode(newCountry)}`.\n      return getInternationalPhoneNumberPrefix(newCountry, metadata);\n    }\n  } // If switching to some country.\n  // (from \"International\" or another country)\n  // If switching from \"International\" then `phoneDigits` starts with a `+`.\n  // Otherwise it may or may not start with a `+`.\n\n\n  if (newCountry) {\n    // If the phone number was entered in international format\n    // then migrate it to the newly selected country.\n    // The phone number may be incomplete.\n    // The phone number entered not necessarily starts with\n    // the previously selected country phone prefix.\n    if (phoneDigits[0] === '+') {\n      // If the international phone number is for the new country\n      // then convert it to local if required.\n      if (useNationalFormat) {\n        // // If a phone number is being input in international form\n        // // and the country can already be derived from it,\n        // // and if it is the new country, then format as a national number.\n        // const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\n        // if (derived_country === newCountry) {\n        // \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\n        // }\n        // Actually, the two countries don't necessarily need to match:\n        // the condition could be looser here, because several countries\n        // might share the same international phone number format\n        // (for example, \"NANPA\" countries like US, Canada, etc).\n        // The looser condition would be just \"same nternational phone number format\"\n        // which would mean \"same country calling code\" in the context of `libphonenumber-js`.\n        if (phoneDigits.indexOf('+' + getCountryCallingCode(newCountry, metadata)) === 0) {\n          return stripCountryCallingCode(phoneDigits, newCountry, metadata);\n        } // Simply discard the previously entered international phone number,\n        // because otherwise any \"smart\" transformation like getting the\n        // \"national (significant) number\" part and then prepending the\n        // newly selected country's \"country calling code\" to it\n        // would just be confusing for a user without being actually useful.\n\n\n        return ''; // // Simply strip the leading `+` character\n        // // therefore simply converting all digits into a \"local\" phone number.\n        // // https://github.com/catamphetamine/react-phone-number-input/issues/287\n        // return phoneDigits.slice(1)\n      }\n\n      if (prevCountry) {\n        var newCountryPrefix = getInternationalPhoneNumberPrefix(newCountry, metadata);\n\n        if (phoneDigits.indexOf(newCountryPrefix) === 0) {\n          return phoneDigits;\n        } else {\n          return newCountryPrefix;\n        }\n      } else {\n        var defaultValue = getInternationalPhoneNumberPrefix(newCountry, metadata); // If `phoneDigits`'s country calling code part is the same\n        // as for the new `country`, then leave `phoneDigits` as is.\n\n        if (phoneDigits.indexOf(defaultValue) === 0) {\n          return phoneDigits;\n        } // If `phoneDigits`'s country calling code part is not the same\n        // as for the new `country`, then set `phoneDigits` to\n        // `+{getCountryCallingCode(newCountry)}`.\n\n\n        return defaultValue;\n      } // // If the international phone number already contains\n      // // any country calling code then trim the country calling code part.\n      // // (that could also be the newly selected country phone code prefix as well)\n      // // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\n      // // (e.g. if a user enters an international number\n      // //  not belonging to any of the reduced `countries` list).\n      // phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\n      // // Prepend country calling code prefix\n      // // for the newly selected country.\n      // return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\n\n    }\n  } // If switching to \"International\" from a country.\n  else {\n      // If the phone number was entered in national format.\n      if (phoneDigits[0] !== '+') {\n        // Format the national phone number as an international one.\n        // The phone number entered not necessarily even starts with\n        // the previously selected country phone prefix.\n        // Even if the phone number belongs to whole another country\n        // it will still be parsed into some national phone number.\n        return e164(phoneDigits, prevCountry, metadata) || '';\n      }\n    }\n\n  return phoneDigits;\n}\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\nexport function e164(number, country, metadata) {\n  if (!number) {\n    return;\n  } // If the phone number is being input in international format.\n\n\n  if (number[0] === '+') {\n    // If it's just the `+` sign then return nothing.\n    if (number === '+') {\n      return;\n    } // If there are any digits then the `value` is returned as is.\n\n\n    return number;\n  } // For non-international phone numbers\n  // an accompanying country code is required.\n\n\n  if (!country) {\n    return;\n  }\n\n  var partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (partial_national_significant_number) {\n    return \"+\".concat(getCountryCallingCode(country, metadata)).concat(partial_national_significant_number);\n  }\n}\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\n\nexport function trimNumber(number, country, metadata) {\n  var nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (nationalSignificantNumberPart) {\n    var overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n\n    if (overflowDigitsCount > 0) {\n      return number.slice(0, number.length - overflowDigitsCount);\n    }\n  }\n\n  return number;\n}\n\nfunction getMaxNumberLength(country, metadata) {\n  // Get \"possible lengths\" for a phone number of the country.\n  metadata = new Metadata(metadata);\n  metadata.country(country); // Return the last \"possible length\".\n\n  return metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1];\n} // If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nexport function getCountryForPartialE164Number(partialE164Number, _ref4) {\n  var country = _ref4.country,\n      countries = _ref4.countries,\n      required = _ref4.required,\n      metadata = _ref4.metadata;\n\n  if (partialE164Number === '+') {\n    // Don't change the currently selected country yet.\n    return country;\n  }\n\n  var derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata); // If a phone number is being input in international form\n  // and the country can already be derived from it,\n  // then select that country.\n\n  if (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n    return derived_country;\n  } // If \"International\" country option has not been disabled\n  // and the international phone number entered doesn't correspond\n  // to the currently selected country then reset the currently selected country.\n  else if (country && !required && !couldNumberBelongToCountry(partialE164Number, country, metadata)) {\n      return undefined;\n    } // Don't change the currently selected country.\n\n\n  return country;\n}\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\n\nexport function onPhoneDigitsChange(phoneDigits, _ref5) {\n  var prevPhoneDigits = _ref5.prevPhoneDigits,\n      country = _ref5.country,\n      defaultCountry = _ref5.defaultCountry,\n      countryRequired = _ref5.countryRequired,\n      getAnyCountry = _ref5.getAnyCountry,\n      countries = _ref5.countries,\n      international = _ref5.international,\n      limitMaxLength = _ref5.limitMaxLength,\n      countryCallingCodeEditable = _ref5.countryCallingCodeEditable,\n      metadata = _ref5.metadata;\n\n  if (international && countryCallingCodeEditable === false) {\n    var prefix = getInternationalPhoneNumberPrefix(country, metadata); // The `<input/>` value must start with the country calling code.\n\n    if (phoneDigits.indexOf(prefix) !== 0) {\n      var _value; // If a phone number input is declared as\n      // `international` and `withCountryCallingCode`,\n      // then it's gonna be non-empty even before the user\n      // has input anything in it.\n      // This will result in its contents (the country calling code part)\n      // being selected when the user tabs into such field.\n      // If the user then starts inputting the national part digits,\n      // then `<input/>` value changes from `+xxx` to `y`\n      // because inputting anything while having the `<input/>` value\n      // selected results in erasing the `<input/>` value\n      // So, the component handles such case by restoring\n      // the intended `<input/>`` value: `+xxxy`.\n      // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\n\n\n      if (phoneDigits && phoneDigits[0] !== '+') {\n        phoneDigits = prefix + phoneDigits;\n        _value = phoneDigits;\n      } else {\n        phoneDigits = prefix;\n      }\n\n      return {\n        phoneDigits: phoneDigits,\n        value: _value,\n        country: country\n      };\n    }\n  } // If `international` property is `false`, then it means\n  // \"enforce national-only format during input\",\n  // so, if that's the case, then remove all `+` characters,\n  // but only if some country is currently selected.\n  // (not if \"International\" country is selected).\n\n\n  if (international === false && country && phoneDigits && phoneDigits[0] === '+') {\n    phoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata);\n  } // Trim the input to not exceed the maximum possible number length.\n\n\n  if (phoneDigits && country && limitMaxLength) {\n    phoneDigits = trimNumber(phoneDigits, country, metadata);\n  } // If this `onChange()` event was triggered\n  // as a result of selecting \"International\" country,\n  // then force-prepend a `+` sign if the phone number\n  // `<input/>` value isn't in international format.\n  // Also, force-prepend a `+` sign if international\n  // phone number input format is set.\n\n\n  if (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\n    phoneDigits = '+' + phoneDigits;\n  } // If the previously entered phone number\n  // has been entered in international format\n  // and the user decides to erase it,\n  // then also reset the `country`\n  // because it was most likely automatically selected\n  // while the user was typing in the phone number\n  // in international format.\n  // This fixes the issue when a user is presented\n  // with a phone number input with no country selected\n  // and then types in their local phone number\n  // then discovers that the input's messed up\n  // (a `+` has been prepended at the start of their input\n  //  and a random country has been selected),\n  // decides to undo it all by erasing everything\n  // and then types in their local phone number again\n  // resulting in a seemingly correct phone number\n  // but in reality that phone number has incorrect country.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/273\n\n\n  if (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\n    if (international) {\n      country = undefined;\n    } else {\n      country = defaultCountry;\n    }\n  } // Also resets such \"randomly\" selected country\n  // as soon as the user erases the number\n  // digit-by-digit up to the leading `+` sign.\n\n\n  if (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\n    country = undefined;\n  } // Generate the new `value` property.\n\n\n  var value;\n\n  if (phoneDigits) {\n    if (phoneDigits[0] === '+') {\n      if (phoneDigits === '+') {\n        value = undefined;\n      } else if (country && getInternationalPhoneNumberPrefix(country, metadata).indexOf(phoneDigits) === 0) {\n        value = undefined;\n      } else {\n        value = phoneDigits;\n      }\n    } else {\n      value = e164(phoneDigits, country, metadata);\n    }\n  } // Derive the country from the phone number.\n  // (regardless of whether there's any country currently selected,\n  //  because there could be several countries corresponding to one country calling code)\n\n\n  if (value) {\n    country = getCountryForPartialE164Number(value, {\n      country: country,\n      countries: countries,\n      metadata: metadata\n    }); // If `international` property is `false`, then it means\n    // \"enforce national-only format during input\",\n    // so, if that's the case, then remove all `+` characters,\n    // but only if some country is currently selected.\n    // (not if \"International\" country is selected).\n\n    if (international === false && country && phoneDigits && phoneDigits[0] === '+') {\n      phoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata); // Re-calculate `value` because `phoneDigits` has changed.\n\n      value = e164(phoneDigits, country, metadata);\n    }\n  }\n\n  if (!country && countryRequired) {\n    country = defaultCountry || getAnyCountry();\n  }\n\n  return {\n    phoneDigits: phoneDigits,\n    country: country,\n    value: value\n  };\n}\n\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\n  // Handle the case when a user might have pasted\n  // a phone number in international format.\n  if (input.indexOf(getInternationalPhoneNumberPrefix(country, metadata)) === 0) {\n    // Create \"as you type\" formatter.\n    var formatter = new AsYouType(country, metadata); // Input partial national phone number.\n\n    formatter.input(input); // Return the parsed partial national phone number.\n\n    var phoneNumber = formatter.getNumber();\n\n    if (phoneNumber) {\n      // Transform the number to a national one,\n      // and remove all non-digits.\n      return phoneNumber.formatNational().replace(/\\D/g, '');\n    } else {\n      return '';\n    }\n  } else {\n    // Just remove the `+` sign.\n    return input.replace(/\\D/g, '');\n  }\n}\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nexport function getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\n  var formatter = new AsYouType(null, metadata);\n  formatter.input(number); // // `001` is a special \"non-geograpical entity\" code\n  // // in Google's `libphonenumber` library.\n  // if (formatter.getCountry() === '001') {\n  // \treturn\n  // }\n\n  return formatter.getCountry();\n}\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\n\nexport function compareStrings(a, b, locales) {\n  // Use `String.localeCompare` if it's available.\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n  // Which means everyone except IE <= 10 and Safari <= 10.\n  // `localeCompare()` is available in latest Node.js versions.\n\n  /* istanbul ignore else */\n  if (String.prototype.localeCompare) {\n    return a.localeCompare(b, locales);\n  }\n  /* istanbul ignore next */\n\n\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\n\nexport function stripCountryCallingCode(number, country, metadata) {\n  // Just an optimization, so that it\n  // doesn't have to iterate through all country calling codes.\n  if (country) {\n    var countryCallingCodePrefix = '+' + getCountryCallingCode(country, metadata); // If `country` fits the actual `number`.\n\n    if (number.length < countryCallingCodePrefix.length) {\n      if (countryCallingCodePrefix.indexOf(number) === 0) {\n        return '';\n      }\n    } else {\n      if (number.indexOf(countryCallingCodePrefix) === 0) {\n        return number.slice(countryCallingCodePrefix.length);\n      }\n    }\n  } // If `country` doesn't fit the actual `number`.\n  // Try all available country calling codes.\n\n\n  for (var _i = 0, _Object$keys = Object.keys(metadata.country_calling_codes); _i < _Object$keys.length; _i++) {\n    var country_calling_code = _Object$keys[_i];\n\n    if (number.indexOf(country_calling_code) === '+'.length) {\n      return number.slice('+'.length + country_calling_code.length);\n    }\n  }\n\n  return '';\n}\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\n\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\n  // Create \"as you type\" formatter.\n  var formatter = new AsYouType(country, metadata); // Input partial national phone number.\n\n  formatter.input(number); // Return the parsed partial national phone number.\n\n  var phoneNumber = formatter.getNumber();\n  return phoneNumber && phoneNumber.nationalNumber;\n}\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\n\nexport function couldNumberBelongToCountry(number, country, metadata) {\n  var intlPhoneNumberPrefix = getInternationalPhoneNumberPrefix(country, metadata);\n  var i = 0;\n\n  while (i < number.length && i < intlPhoneNumberPrefix.length) {\n    if (number[i] !== intlPhoneNumberPrefix[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\n\nexport function getInitialPhoneDigits(_ref6) {\n  var value = _ref6.value,\n      phoneNumber = _ref6.phoneNumber,\n      defaultCountry = _ref6.defaultCountry,\n      international = _ref6.international,\n      useNationalFormat = _ref6.useNationalFormat,\n      metadata = _ref6.metadata;\n\n  // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `useNationalFormat` is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n  if ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\n    return generateNationalNumberDigits(phoneNumber);\n  } // If `international` property is `true`,\n  // meaning \"enforce international phone number format\",\n  // then always show country calling code in the input field.\n\n\n  if (!value && international && defaultCountry) {\n    return getInternationalPhoneNumberPrefix(defaultCountry, metadata);\n  }\n\n  return value;\n}\n//# sourceMappingURL=phoneInputHelpers.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getInitialPhoneDigits, getCountryForPartialE164Number, parsePhoneNumber } from './phoneInputHelpers';\nimport { isCountrySupportedWithError, getSupportedCountries } from './countries';\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\n  var metadata = props.metadata,\n      countries = props.countries,\n      newDefaultCountry = props.defaultCountry,\n      newValue = props.value,\n      newReset = props.reset,\n      international = props.international,\n      displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber,\n      initialValueFormat = props.initialValueFormat;\n  var prevDefaultCountry = prevProps.defaultCountry,\n      prevValue = prevProps.value,\n      prevReset = prevProps.reset;\n  var country = state.country,\n      value = state.value,\n      hasUserSelectedACountry = state.hasUserSelectedACountry;\n\n  var _getInitialPhoneDigits = function _getInitialPhoneDigits(parameters) {\n    return getInitialPhoneDigits(_objectSpread({}, parameters, {\n      international: international,\n      useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n      metadata: metadata\n    }));\n  }; // Some users requested a way to reset the component\n  // (both number `<input/>` and country `<select/>`).\n  // Whenever `reset` property changes both number `<input/>`\n  // and country `<select/>` are reset.\n  // It's not implemented as some instance `.reset()` method\n  // because `ref` is forwarded to `<input/>`.\n  // It's also not replaced with just resetting `country` on\n  // external `value` reset, because a user could select a country\n  // and then not input any `value`, and so the selected country\n  // would be \"stuck\", if not using this `reset` property.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n\n  if (newReset !== prevReset) {\n    return {\n      phoneDigits: _getInitialPhoneDigits({\n        value: undefined,\n        defaultCountry: newDefaultCountry\n      }),\n      value: undefined,\n      country: newDefaultCountry,\n      hasUserSelectedACountry: undefined\n    };\n  } // `value` is the value currently shown in the component:\n  // it's stored in the component's `state`, and it's not the `value` property.\n  // `prevValue` is \"previous `value` property\".\n  // `newValue` is \"new `value` property\".\n  // If the default country changed\n  // (e.g. in case of ajax GeoIP detection after page loaded)\n  // then select it, but only if the user hasn't already manually\n  // selected a country, and no phone number has been manually entered so far.\n  // Because if the user has already started inputting a phone number\n  // then they're okay with no country being selected at all (\"International\")\n  // and they don't want to be disturbed, don't want their input to be screwed, etc.\n\n\n  if (newDefaultCountry !== prevDefaultCountry) {\n    var isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata);\n\n    var noValueHasBeenEnteredByTheUser = // By default, \"no value has been entered\" means `value` is `undefined`.\n    !value || // When `international` is `true`, and some country has been pre-selected,\n    // then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\n    // so in case of `international` being `true`, \"the user hasn't entered anything\" situation\n    // doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\n    international && value === _getInitialPhoneDigits({\n      value: undefined,\n      defaultCountry: prevDefaultCountry\n    }); // Only update the `defaultCountry` property if no phone number\n    // has been entered by the user or pre-set by the application.\n\n\n    var noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser;\n\n    if (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\n      return {\n        country: newDefaultCountry,\n        // If `phoneDigits` is empty, then automatically select the new `country`\n        // and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\n        // The code assumes that \"no phone number has been entered by the user\",\n        // and no `value` property has been passed, so the `phoneNumber` parameter\n        // of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\n        phoneDigits: _getInitialPhoneDigits({\n          value: undefined,\n          defaultCountry: newDefaultCountry\n        }),\n        // `value` is `undefined` and it stays so.\n        value: undefined\n      };\n    }\n  } // If a new `value` is set externally.\n  // (e.g. as a result of an ajax API request\n  //  to get user's phone after page loaded)\n  // The first part — `newValue !== prevValue` —\n  // is basically `props.value !== prevProps.value`\n  // so it means \"if value property was changed externally\".\n  // The second part — `newValue !== value` —\n  // is for ignoring the `getDerivedStateFromProps()` call\n  // which happens in `this.onChange()` right after `this.setState()`.\n  // If this `getDerivedStateFromProps()` call isn't ignored\n  // then the country flag would reset on each input.\n\n\n  if (newValue !== prevValue && newValue !== value) {\n    var phoneNumber;\n    var parsedCountry;\n\n    if (newValue) {\n      phoneNumber = parsePhoneNumber(newValue, metadata);\n      var supportedCountries = getSupportedCountries(countries, metadata);\n\n      if (phoneNumber && phoneNumber.country) {\n        // Ignore `else` because all countries are supported in metadata.\n\n        /* istanbul ignore next */\n        if (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\n          parsedCountry = phoneNumber.country;\n        }\n      } else {\n        parsedCountry = getCountryForPartialE164Number(newValue, {\n          country: undefined,\n          countries: supportedCountries,\n          metadata: metadata\n        });\n      }\n    }\n\n    var hasUserSelectedACountryUpdate;\n\n    if (!newValue) {\n      // Reset `hasUserSelectedACountry` flag in `state`.\n      hasUserSelectedACountryUpdate = {\n        hasUserSelectedACountry: undefined\n      };\n    }\n\n    return _objectSpread({}, hasUserSelectedACountryUpdate, {\n      phoneDigits: _getInitialPhoneDigits({\n        phoneNumber: phoneNumber,\n        value: newValue,\n        defaultCountry: newDefaultCountry\n      }),\n      value: newValue,\n      country: newValue ? parsedCountry : newDefaultCountry\n    });\n  } // `defaultCountry` didn't change.\n  // `value` didn't change.\n  // `phoneDigits` didn't change, because `value` didn't change.\n  //\n  // So no need to update state.\n\n}\n//# sourceMappingURL=getPhoneInputWithCountryStateUpdateFromNewProps.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputSmart from './InputSmart';\nimport InputBasic from './InputBasic';\nimport Flag from './Flag';\nimport InternationalIcon from './InternationalIcon';\nimport { sortCountryOptions, isCountrySupportedWithError, getSupportedCountries, getSupportedCountryOptions, getCountries } from './helpers/countries';\nimport { createCountryIconComponent } from './CountryIcon';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes';\nimport { getPreSelectedCountry, getCountrySelectOptions as _getCountrySelectOptions, parsePhoneNumber, generateNationalNumberDigits, getPhoneDigitsForNewCountry, getInitialPhoneDigits, onPhoneDigitsChange, e164 } from './helpers/phoneInputHelpers';\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps';\n\nvar PhoneNumberInput_ =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n\n  function PhoneNumberInput_(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneNumberInput_);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PhoneNumberInput_).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"inputRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"setInputRef\", function (instance) {\n      _this.inputRef.current = instance;\n      var ref = _this.props.inputRef;\n\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(instance);\n        } else {\n          ref.current = instance;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n          international = _this$props.international,\n          metadata = _this$props.metadata,\n          onChange = _this$props.onChange,\n          focusInputOnCountrySelection = _this$props.focusInputOnCountrySelection;\n      var _this$state = _this.state,\n          prevPhoneDigits = _this$state.phoneDigits,\n          prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n        prevCountry: prevCountry,\n        newCountry: newCountry,\n        metadata: metadata,\n        // Convert the phone number to \"national\" format\n        // when the user changes the selected country by hand.\n        useNationalFormat: !international\n      });\n      var newValue = e164(newPhoneDigits, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      if (focusInputOnCountrySelection) {\n        _this.inputRef.current.focus();\n      } // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        phoneDigits: newPhoneDigits,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_phoneDigits) {\n      var _this$props2 = _this.props,\n          defaultCountry = _this$props2.defaultCountry,\n          onChange = _this$props2.onChange,\n          addInternationalOption = _this$props2.addInternationalOption,\n          international = _this$props2.international,\n          limitMaxLength = _this$props2.limitMaxLength,\n          countryCallingCodeEditable = _this$props2.countryCallingCodeEditable,\n          metadata = _this$props2.metadata;\n      var _this$state2 = _this.state,\n          countries = _this$state2.countries,\n          prevPhoneDigits = _this$state2.phoneDigits,\n          currentlySelectedCountry = _this$state2.country;\n\n      var _onPhoneDigitsChange = onPhoneDigitsChange(_phoneDigits, {\n        prevPhoneDigits: prevPhoneDigits,\n        country: currentlySelectedCountry,\n        countryRequired: !addInternationalOption,\n        defaultCountry: defaultCountry,\n        getAnyCountry: function getAnyCountry() {\n          return _this.getFirstSupportedCountry({\n            countries: countries\n          });\n        },\n        countries: countries,\n        international: international,\n        limitMaxLength: limitMaxLength,\n        countryCallingCodeEditable: countryCallingCodeEditable,\n        metadata: metadata\n      }),\n          phoneDigits = _onPhoneDigitsChange.phoneDigits,\n          country = _onPhoneDigitsChange.country,\n          value = _onPhoneDigitsChange.value;\n\n      var stateUpdate = {\n        phoneDigits: phoneDigits,\n        value: value,\n        country: country\n      };\n\n      if (countryCallingCodeEditable === false) {\n        // If it simply did `setState({ phoneDigits: intlPrefix })` here,\n        // then it would have no effect when erasing an inital international prefix\n        // via Backspace, because `phoneDigits` in `state` wouldn't change\n        // as a result, because it was `prefix` and it became `prefix`,\n        // so the component wouldn't rerender, and the user would be able\n        // to erase the country calling code part, and that part is\n        // assumed to be non-eraseable. That's why the component is\n        // forcefully rerendered here.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n        if (!value && phoneDigits === _this.state.phoneDigits) {\n          // Force a re-render of the `<input/>` in order to reset its value.\n          stateUpdate.forceRerender = {};\n        }\n      }\n\n      _this.setState(stateUpdate, // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n\n      _this._onBlur();\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n\n    var _this$props3 = _this.props,\n        _value = _this$props3.value,\n        labels = _this$props3.labels,\n        _international = _this$props3.international,\n        _addInternationalOption = _this$props3.addInternationalOption,\n        displayInitialValueAsLocalNumber = _this$props3.displayInitialValueAsLocalNumber,\n        initialValueFormat = _this$props3.initialValueFormat,\n        _metadata = _this$props3.metadata;\n    var _this$props4 = _this.props,\n        _defaultCountry = _this$props4.defaultCountry,\n        _countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n\n    _countries = getSupportedCountries(_countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    var preSelectedCountry = getPreSelectedCountry({\n      value: _value,\n      phoneNumber: phoneNumber,\n      defaultCountry: _defaultCountry,\n      required: !_addInternationalOption,\n      countries: _countries || getCountries(_metadata),\n      getAnyCountry: function getAnyCountry() {\n        return _this.getFirstSupportedCountry({\n          countries: _countries\n        });\n      },\n      metadata: _metadata\n    });\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: preSelectedCountry,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: _countries,\n      // `phoneDigits` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value` is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `phoneDigits` are `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n      phoneDigits: getInitialPhoneDigits({\n        value: _value,\n        phoneNumber: phoneNumber,\n        defaultCountry: _defaultCountry,\n        international: _international,\n        useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n        metadata: _metadata\n      }),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `phoneDigits` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `phoneDigits` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    }\n  }, {\n    key: \"getCountrySelectOptions\",\n    value: function getCountrySelectOptions(_ref) {\n      var countries = _ref.countries;\n      var _this$props5 = this.props,\n          international = _this$props5.international,\n          countryCallingCodeEditable = _this$props5.countryCallingCodeEditable,\n          countryOptionsOrder = _this$props5.countryOptionsOrder,\n          addInternationalOption = _this$props5.addInternationalOption,\n          labels = _this$props5.labels,\n          locales = _this$props5.locales,\n          metadata = _this$props5.metadata;\n      return useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(_getCountrySelectOptions({\n          countries: countries || getCountries(metadata),\n          countryNames: labels,\n          addInternationalOption: international && countryCallingCodeEditable === false ? false : addInternationalOption,\n          compareStringsLocales: locales // compareStrings\n\n        }), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n    }\n  }, {\n    key: \"getFirstSupportedCountry\",\n    value: function getFirstSupportedCountry(_ref2) {\n      var countries = _ref2.countries;\n      var countryOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return countryOptions[0].value;\n    } // A shorthand for not passing `metadata` as a second argument.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          name = _this$props6.name,\n          disabled = _this$props6.disabled,\n          autoComplete = _this$props6.autoComplete,\n          style = _this$props6.style,\n          className = _this$props6.className,\n          inputRef = _this$props6.inputRef,\n          inputComponent = _this$props6.inputComponent,\n          numberInputProps = _this$props6.numberInputProps,\n          smartCaret = _this$props6.smartCaret,\n          CountrySelectComponent = _this$props6.countrySelectComponent,\n          countrySelectProps = _this$props6.countrySelectProps,\n          ContainerComponent = _this$props6.containerComponent,\n          defaultCountry = _this$props6.defaultCountry,\n          countriesProperty = _this$props6.countries,\n          countryOptionsOrder = _this$props6.countryOptionsOrder,\n          labels = _this$props6.labels,\n          flags = _this$props6.flags,\n          flagComponent = _this$props6.flagComponent,\n          flagUrl = _this$props6.flagUrl,\n          addInternationalOption = _this$props6.addInternationalOption,\n          internationalIcon = _this$props6.internationalIcon,\n          displayInitialValueAsLocalNumber = _this$props6.displayInitialValueAsLocalNumber,\n          initialValueFormat = _this$props6.initialValueFormat,\n          onCountryChange = _this$props6.onCountryChange,\n          limitMaxLength = _this$props6.limitMaxLength,\n          countryCallingCodeEditable = _this$props6.countryCallingCodeEditable,\n          focusInputOnCountrySelection = _this$props6.focusInputOnCountrySelection,\n          reset = _this$props6.reset,\n          metadata = _this$props6.metadata,\n          international = _this$props6.international,\n          locales = _this$props6.locales,\n          rest = _objectWithoutProperties(_this$props6, [\"name\", \"disabled\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"containerComponent\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"initialValueFormat\", \"onCountryChange\", \"limitMaxLength\", \"countryCallingCodeEditable\", \"focusInputOnCountrySelection\", \"reset\", \"metadata\", \"international\", \"locales\"]);\n\n      var _this$state3 = this.state,\n          country = _this$state3.country,\n          countries = _this$state3.countries,\n          phoneDigits = _this$state3.phoneDigits,\n          isFocused = _this$state3.isFocused;\n      var InputComponent = smartCaret ? InputSmart : InputBasic;\n      var countrySelectOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return React.createElement(ContainerComponent, {\n        style: style,\n        className: classNames(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused\n        })\n      }, React.createElement(CountrySelectComponent, _extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        iconComponent: this.CountryIcon\n      })), React.createElement(InputComponent, _extends({\n        ref: this.setInputRef,\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: phoneDigits || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        inputComponent: inputComponent,\n        className: classNames('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    value: function getDerivedStateFromProps(props, state) {\n      return _objectSpread({\n        // Emulate `prevProps` via `state.props`.\n        props: props\n      }, getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state));\n    }\n  }]);\n\n  return PhoneNumberInput_;\n}(React.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\n\nvar PhoneNumberInput = React.forwardRef(function (props, ref) {\n  return React.createElement(PhoneNumberInput_, _extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * Updates the `value` as the user inputs the phone number.\r\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * `onKeyDown` handler (e.g. to handle Enter key press).\r\n   * @ignore\r\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\r\n   * Set to `true` to disable both the phone number `<input/>`\r\n   * and the country `<select/>`.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com\r\n   * /web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: PropTypes.string.isRequired,\n\n  /**\r\n   * Set to `\"national\"` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if `initialValueFormat` is `\"national\"`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, `initialValueFormat` is `undefined`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `undefined` by default)\n  initialValueFormat: PropTypes.oneOf(['national']),\n  // `displayInitialValueAsLocalNumber` property has been\n  // superceded by `initialValueFormat` property.\n  displayInitialValueAsLocalNumber: PropTypes.bool,\n\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: PropTypes.string,\n\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: labelsPropType.isRequired,\n\n  /**\r\n   * Country `<select/>` options are sorted by their labels.\r\n   * The default sorting function uses `a.localeCompare(b, locales)`,\r\n   * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n   * Some languages, like Chinese, support multiple sorting variants\r\n   * (called \"collations\"), and the user might prefer one or another.\r\n   * Also, sometimes the Operating System language is not always\r\n   * the preferred language for a person using a website or an application,\r\n   * so there should be a way to specify custom locale.\r\n   * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n   * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n   */\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /*\r\n   * Custom country `<select/>` options sorting function.\r\n   * The default one uses `a.localeCompare(b)`, and,\r\n   * if that's not available, falls back to simple `a > b`/`a < b`.\r\n   * There have been requests to add custom sorter for cases\r\n   * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n   * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n  compareStrings: PropTypes.func,\r\n   */\n\n  /**\r\n   * A URL template of a country flag, where\r\n   * \"{XX}\" is a two-letter country code in upper case,\r\n   * or where \"{xx}\" is a two-letter country code in lower case.\r\n   * By default it points to `country-flag-icons` gitlab pages website.\r\n   * I imagine someone might want to download those country flag icons\r\n   * and host them on their own servers instead\r\n   * (all flags are available in the `country-flag-icons` library).\r\n   * There's a catch though: new countries may be added in future,\r\n   * so when hosting country flag icons on your own server\r\n   * one should check the `CHANGELOG.md` every time before updating this library,\r\n   * otherwise there's a possibility that some new country flag would be missing.\r\n   */\n  flagUrl: PropTypes.string.isRequired,\n\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags will be used instead of the default ones.\r\n   * The the \"Flags\" section of the readme for more info.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n   *\r\n   * Example:\r\n   *\r\n   * `import flags from 'country-flag-icons/react/3x2'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: PropTypes.objectOf(PropTypes.elementType),\n\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * `country: string` — The country code.\r\n   * * `countryName: string` — The country name.\r\n   * * `flagUrl: string` — The `flagUrl` property (see above).\r\n   * * `flags: object` — The `flags` property (see above).\r\n   */\n  flagComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n   */\n  addInternationalOption: PropTypes.bool.isRequired,\n\n  /**\r\n   * \"International\" icon component.\r\n   * Should have the same aspect ratio.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `title: string` — \"International\" country option label.\r\n   */\n  internationalIcon: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"XX\"` — inserts an option for \"XX\" country.\r\n   * * `\"🌐\"` — inserts \"International\" option.\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: PropTypes.object,\n\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name: string?` — HTML `name` attribute.\r\n   * * `value: string?` — The currently selected country code.\r\n   * * `onChange(value: string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n   * * `disabled: boolean?` — HTML `disabled` attribute.\r\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className: string` — CSS class name.\r\n   */\n  countrySelectComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Country `<select/>` component props.\r\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n   */\n  countrySelectProps: PropTypes.object,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  inputComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `style: object` — A component CSS style object.\r\n   * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n   */\n  containerComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: PropTypes.object,\n\n  /**\r\n   * By default, the caret position is being \"intelligently\" managed\r\n   * while a user inputs a phone number.\r\n   * This \"smart\" caret behavior can be turned off\r\n   * by passing `smartCaret={false}` property.\r\n   * This is just an \"escape hatch\" for any possible caret position issues.\r\n   */\n  // Is `true` by default.\n  smartCaret: PropTypes.bool.isRequired,\n\n  /**\r\n   * Set to `true` to force \"international\" phone number format.\r\n   * Set to `false` to force \"national\" phone number format.\r\n   * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n   */\n  international: PropTypes.bool,\n\n  /**\r\n   * If set to `true`, the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: PropTypes.bool.isRequired,\n\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: PropTypes.bool.isRequired,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: metadataPropType.isRequired,\n\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: PropTypes.func,\n\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: PropTypes.bool.isRequired\n};\nPhoneNumberInput.defaultProps = {\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: Flag,\n\n  /**\r\n   * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: 'input',\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   */\n  containerComponent: 'div',\n\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` is forwarded to `<input/>`.\r\n   * It's also not replaced with just resetting `country` on\r\n   * external `value` reset, because a user could select a country\r\n   * and then not input any `value`, and so the selected country\r\n   * would be \"stuck\", if not using this `reset` property.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: PropTypes.any,\n\n  /**\r\n   *\r\n   */\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  addInternationalOption: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false,\n\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: true,\n\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: true\n};\nexport default PhoneNumberInput;\nvar countrySelectOptionsMemo;\nvar countrySelectOptionsMemoDependencies;\n\nfunction useMemoCountrySelectOptions(generator, dependencies) {\n  if (!countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\n    countrySelectOptionsMemo = generator();\n    countrySelectOptionsMemoDependencies = dependencies;\n  }\n\n  return countrySelectOptionsMemo;\n}\n\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var i = 0;\n\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n//# sourceMappingURL=PhoneInputWithCountry.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { parsePhoneNumberFromString } from 'libphonenumber-js/core';\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function formatPhoneNumber(value, format, metadata) {\n  if (!metadata) {\n    if (_typeof(format) === 'object') {\n      metadata = format;\n      format = 'NATIONAL';\n    }\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return '';\n  } // Deprecated.\n  // Legacy `format`s.\n\n\n  switch (format) {\n    case 'National':\n      format = 'NATIONAL';\n      break;\n\n    case 'International':\n      format = 'INTERNATIONAL';\n      break;\n  }\n\n  return phoneNumber.format(format);\n}\nexport function formatPhoneNumberIntl(value, metadata) {\n  return formatPhoneNumber(value, 'INTERNATIONAL', metadata);\n}\n//# sourceMappingURL=formatPhoneNumber.js.map","/**\r\n * Creates Unicode flag from a two-letter ISO country code.\r\n * https://stackoverflow.com/questions/24050671/how-to-put-japan-flag-character-in-a-string\r\n * @param  {string} country — A two-letter ISO country code (case-insensitive).\r\n * @return {string}\r\n */\nexport default function getCountryFlag(country) {\n  return getRegionalIndicatorSymbol(country[0]) + getRegionalIndicatorSymbol(country[1]);\n}\n/**\r\n * Converts a letter to a Regional Indicator Symbol.\r\n * @param  {string} letter\r\n * @return {string}\r\n */\n\nfunction getRegionalIndicatorSymbol(letter) {\n  return String.fromCodePoint(0x1F1E6 - 65 + letter.toUpperCase().charCodeAt(0));\n}\n//# sourceMappingURL=unicode.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode';\nexport default function CountrySelect(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      options = _ref.options,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"options\"]);\n\n  var onChange_ = useCallback(function (event) {\n    var value = event.target.value;\n    onChange(value === 'ZZ' ? undefined : value);\n  }, [onChange]);\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]); // \"ZZ\" means \"International\".\n  // (HTML requires each `<option/>` have some string `value`).\n\n  return React.createElement(\"select\", _extends({}, rest, {\n    value: value || 'ZZ',\n    onChange: onChange_\n  }), options.map(function (_ref2) {\n    var value = _ref2.value,\n        label = _ref2.label,\n        divider = _ref2.divider;\n    return React.createElement(\"option\", {\n      key: divider ? '|' : value || 'ZZ',\n      value: divider ? '|' : value || 'ZZ',\n      disabled: divider ? true : false,\n      style: divider ? DIVIDER_STYLE : undefined\n    }, label);\n  }));\n}\nCountrySelect.propTypes = {\n  /**\r\n   * A two-letter country code.\r\n   * Example: \"US\", \"RU\", etc.\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * Updates the `value`.\r\n   */\n  onChange: PropTypes.func.isRequired,\n  // `<select/>` options.\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string,\n    label: PropTypes.string,\n    divider: PropTypes.bool\n  })).isRequired\n};\nvar DIVIDER_STYLE = {\n  fontSize: '1px',\n  backgroundColor: 'currentColor',\n  color: 'inherit'\n};\nexport function CountrySelectWithIcon(_ref3) {\n  var value = _ref3.value,\n      options = _ref3.options,\n      className = _ref3.className,\n      Icon = _ref3.iconComponent,\n      getIconAspectRatio = _ref3.getIconAspectRatio,\n      Arrow = _ref3.arrowComponent,\n      unicodeFlags = _ref3.unicodeFlags,\n      rest = _objectWithoutProperties(_ref3, [\"value\", \"options\", \"className\", \"iconComponent\", \"getIconAspectRatio\", \"arrowComponent\", \"unicodeFlags\"]);\n\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]);\n  return React.createElement(\"div\", {\n    className: \"PhoneInputCountry\"\n  }, React.createElement(CountrySelect, _extends({}, rest, {\n    value: value,\n    options: options,\n    className: classNames('PhoneInputCountrySelect', className)\n  })), unicodeFlags && value && React.createElement(\"div\", {\n    className: \"PhoneInputCountryIconUnicode\"\n  }, getUnicodeFlagIcon(value)), !(unicodeFlags && value) && React.createElement(Icon, {\n    country: value,\n    label: selectedOption && selectedOption.label,\n    aspectRatio: unicodeFlags ? 1 : undefined\n  }), React.createElement(Arrow, null));\n}\nCountrySelectWithIcon.propTypes = {\n  // Country flag component.\n  iconComponent: PropTypes.elementType,\n  // Select arrow component.\n  arrowComponent: PropTypes.elementType.isRequired,\n  // Set to `true` to render Unicode flag icons instead of SVG images.\n  unicodeFlags: PropTypes.bool\n};\nCountrySelectWithIcon.defaultProps = {\n  // Is \"International\" icon square?\n  arrowComponent: function arrowComponent() {\n    return React.createElement(\"div\", {\n      className: \"PhoneInputCountrySelectArrow\"\n    });\n  }\n};\n\nfunction getSelectedOption(options, value) {\n  for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref4 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref4 = _i.value;\n    }\n\n    var option = _ref4;\n\n    if (!option.divider && option.value === value) {\n      return option;\n    }\n  }\n}\n//# sourceMappingURL=CountrySelect.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport labels from '../locale/en.json';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes';\nimport PhoneInput from './PhoneInputWithCountry';\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect';\nexport function createPhoneInput(defaultMetadata) {\n  var PhoneInputDefault = React.forwardRef(function (props, ref) {\n    return React.createElement(PhoneInput, _extends({\n      ref: ref\n    }, props));\n  });\n  PhoneInputDefault.propTypes = {\n    metadata: metadataPropType.isRequired,\n    labels: labelsPropType.isRequired,\n    countrySelectComponent: PropTypes.elementType.isRequired\n  };\n  PhoneInputDefault.defaultProps = {\n    metadata: defaultMetadata,\n    labels: labels,\n    countrySelectComponent: CountrySelect\n  };\n  return PhoneInputDefault;\n}\nexport default createPhoneInput();\n//# sourceMappingURL=PhoneInputWithCountryDefault.js.map","import metadata from 'libphonenumber-js/metadata.mobile.json'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tisSupportedCountry as _isSupportedCountry\r\n} from '../core/index'\r\n\r\nimport { createPhoneInput } from '../modules/PhoneInputWithCountryDefault'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createPhoneInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","apply","key","call","join","module","exports","window","count_occurences","symbol","string","count","_iterator","split","_isArray","_i","Symbol","iterator","_ref","next","done","value","closeBraces","retained_template","template","placeholder","undefined","empty_placeholder","cut_before","opening_braces","closing_braces","dangling_braces","replace","format","caret","formatter","should_close_braces","text","characters_in_template","value_character_index","filled_in_template","character","close_braces","template_formatter","index","found","possibly_last_input_character_index","Keys","setCaretPosition","element","caret_position","navigator","ANDROID_USER_AGENT_REG_EXP","test","userAgent","isAndroid","setSelectionRange","setTimeout","onKeyDown","event","input","_parse","_format","on_change","operation","keyCode","getOperation","preventDefault","selection","selectionStart","selectionEnd","start","end","getSelection","slice","eraseSelection","formatInputText","_parse2","parse_character","focused_input_character_index","parse","newValueAndCaret","edit","formatted","_extends","Object","assign","target","source","prototype","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Input","ref","InputComponent","inputComponent","onChange","rest","internalRef","useRef","setRef","useCallback","instance","current","_onChange","_onKeyDown","onInputKeyDown","React","createElement","isEmptyValue","forwardRef","propTypes","PropTypes","func","isRequired","elementType","type","onCut","onPaste","defaultProps","ParseError","code","Constructor","TypeError","_classCallCheck","name","constructor","message","stack","Error","create","VALID_DIGITS","VALID_PUNCTUATION","concat","a","b","pa","pb","na","Number","nb","isNaN","_typeof","obj","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","_createClass","protoProps","staticProps","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","metadata","is_object","countries","type_of","validateMetadata","setVersion","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","hasCountry","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","ext","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_this","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type2","getType","Type","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","getCountryCallingCode","countryCallingCode","isSupportedCountry","version","v4","compare","getExtensionDigitsPattern","maxLength","createExtensionPattern","purpose","optionalExtnSuffix","possibleSeparatorsBetweenNumberAndExtLabel","possibleSeparatorsNumberExtLabelNoComma","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","RegExp","VALID_PHONE_NUMBER_WITH_EXTENSION","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","number","EXTN_PATTERN","DIGITS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parseDigit","parseDigits","result","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","prevParsedCharacters","checkNumberLength","nationalNumber","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","sort","mergeArrays","actual_length","minimum_length","isPossibleNumber","_slicedToArray","arr","_arrayWithHoles","_arr","_n","_d","_e","_s","err","_iterableToArrayLimit","_nonIterableRest","matchesEntirely","regular_expression","NON_FIXED_LINE_PHONE_TYPES","getNumberType","options","phone","isNumberTypeEqualTo","pattern","_NON_FIXED_LINE_PHONE","applyInternationalSeparatorStyle","formattedNumber","trim","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","useInternationalFormat","withNationalPrefix","carrierCode","internationalFormat","SINGLE_IDD_PREFIX_REG_EXP","_defineProperty","DEFAULT_OPTIONS","formatExtension","extension","formatNumber","ownKeys","sym","getOwnPropertyDescriptor","forEach","_objectSpread","addExtension","formatNationalNumber","_ref2","formatRFC3966","fromCountry","iddPrefix","countryMetadata","getIddPrefix","formatIDD","formatAs","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","search","chooseFormatForNumber","PhoneNumber","_metadata","isCountryCode","isNonGeographicCallingCode","isValidNumber","phoneNumber","CAPTURING_DIGIT_PATTERN","stripIddPrefix","IDDPrefixPattern","matchedGroups","match","extractNationalNumberFromPossiblyIncompleteNumber","prefixPattern","prefixMatch","exec","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","extractNationalNumber","_extractNationalNumbe","nationalSignificantNumber","shouldExtractNationalPrefix","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","possibleShorterNumber","possibleShorterNationalNumber","extractCountryCallingCode","numberWithoutIDD","_extractCountryCallin","shorterNumber","_countryCallingCode","getCountryByCallingCode","nationalPhoneNumber","possibleCountries","selectCountryFromList","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","defaultCountry","_parseInput","extract","_part$split2","parseRFC3966","throwOnError","startsAt","extractFormattedPhoneNumber","isViablePhoneNumberStart","error","withExtensionStripped","numberWithoutExtension","matches","extractExtension","parseInput","formattedPhoneNumber","_parsePhoneNumber","defaultCallingCode","exactCountry","parsePhoneNumber","hasSelectedNumberingPlan","valid","extended","possible","parseNumber","normalizeArguments","args","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","parsePhoneNumberFromString","_normalizeArguments","parsePhoneNumberFromString_","isValidPhoneNumber","isValid","isPossiblePhoneNumber","isPossible","AsYouTypeState","onCountryChange","onCallingCodeChange","properties","_Object$keys","international","missingPlus","digits","resetNationalSignificantNumber","initCountryAndCallingCode","getNationalDigits","nationalSignificantNumberMatchesInput","complexPrefixBeforeNationalSignificantNumber","setCountry","setCallingCode","nextDigits","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","repeat","times","cutAndStripNonPairedParens","cutBeforeIndex","pop","cleared_string","_i2","_dangling_braces","stripNonPairedParens","formatCompleteNumber","state","shouldTryNationalPrefixFormattingRule","getSeparatorAfterNationalPrefix","useNationalPrefixFormattingRule","formatNationalNumberWithAndWithoutNationalPrefixFormattingRule","_ref3","formattedNationalNumber","isValidFormattedNationalNumber","LONGEST_DUMMY_PHONE_NUMBER","NATIONAL_PREFIX_SEPARATORS_PATTERN","NON_ALTERING_FORMAT_REG_EXP","AsYouTypeFormatter","isNANP","resetFormat","chosenFormat","nationalNumberTemplate","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","matchingFormats","narrowDownMatchingFormats","_this2","canFormatCompleteNumber","formattedCompleteNumber","setNationalNumberTemplate","lastIndexOf","formatNationalNumberWithNextDigits","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","_ref4","_this3","leadingDigitsPatternIndex","formatSuits","formatMatches","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","Math","min","leadingDigitsPattern","_this4","_loop2","_isArray2","_iterator2","_ref5","getFormatFormat","createTemplateForFormat","_loop","getTemplateForFormat","_ref6","spacing","internationalPrefix","getInternationalPrefixBeforeCountryCallingCode","getDigitsWithoutInternationalPrefix","_ref7","strictPattern","nationalNumberDummyDigits","nationalPrefixIncludedInTemplate","numberFormat","numberFormatWithNationalPrefix","position","_i3","populateTemplateWithDigits","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser","onNationalSignificantNumberChange","justLeadingPlus","_extractFormattedDigi","_extractFormattedDigi4","extractedNumber","hasPlus","_extractFormattedDigitsAndPlus","formattedDigits","extractFormattedDigitsAndPlus","_extractFormattedDigi2","startInternationalNumber","inputDigits","hasReceivedThreeLeadingDigits","appendDigits","extractIddPrefix","isWaitingForCountryCallingCode","appendNationalSignificantNumberDigits","hasExtractedNationalSignificantNumber","extractNationalSignificantNumber","update","_extractCountryCallingCode","couldPossiblyExtractAnotherNationalSignificantNumber","nationalDigits","setState","onExtractedNationalNumber","prevNationalSignificantNumber","_extractNationalNumbe2","nationalSignificantNumberIndex","extractAnotherNationalSignificantNumber","fixMissingPlus","extractCallingCodeAndNationalSignificantNumber","_extractCountryCallin2","newCallingCode","AsYouType","optionsOrDefaultCountry","_this$getCountryAndCa2","getCountryAndCallingCode","reset","_this$parser$input","parser","formattedOutput","determineTheCountryIfNeeded","reExtractNationalSignificantNumber","getFullNumber","getNonFormattedNumber","getCallingCode","_this$state","isCountryCallingCodeAmbiguous","determineTheCountry","isInternational","prefix","_this$state2","getNonFormattedNationalNumberWithPrefix","_this$state3","getCountry","getNumber","getTemplate","getNonFormattedTemplate","getCountries","getInputValuePrefix","withCountryCallingCode","removeInputValuePrefix","defaultMetadata","InputSmart","bool","object","createInput","InputBasic","newValue","formatIncompletePhoneNumber","FlagComponent","countryName","flags","flagUrl","title","alt","role","src","toLowerCase","InternationalIcon","aspectRatio","InternationalIcon1x1","InternationalIcon3x2","xmlns","viewBox","className","stroke","fill","strokeWidth","strokeMiterlimit","strokeLinecap","d","x1","y1","x2","y2","isCountrySupportedWithError","console","getSupportedCountries","createCountryIconComponent","flagComponent","internationalIcon","CountryIcon","label","_aspectRatio","DefaultInternationalIcon","PhoneInputCountryIcon--square","PhoneInputCountryIcon--border","objectOf","Flag","shape","labels","ONLY_DIGITS_REGEXP","getInternationalPhoneNumberPrefix","getPhoneDigitsForNewCountry","phoneDigits","prevCountry","newCountry","useNationalFormat","countryCallingCodePrefix","country_calling_code","stripCountryCallingCode","newCountryPrefix","defaultValue","e164","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","getCountryForPartialE164Number","partialE164Number","required","derived_country","getCountryFromPossiblyIncompleteInternationalPhoneNumber","couldNumberBelongToCountry","convertInternationalPhoneDigitsToNational","formatNational","compareStrings","locales","String","localeCompare","intlPhoneNumberPrefix","getInitialPhoneDigits","generateNationalNumberDigits","enumerableOnly","symbols","getOwnPropertyDescriptors","defineProperties","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","p","countrySelectOptionsMemo","countrySelectOptionsMemoDependencies","PhoneNumberInput_","_React$PureComponent","_possibleConstructorReturn","createRef","inputRef","_this$props","focusInputOnCountrySelection","newPhoneDigits","focus","hasUserSelectedACountry","_phoneDigits","_this$props2","addInternationalOption","limitMaxLength","countryCallingCodeEditable","_onPhoneDigitsChange","prevPhoneDigits","countryRequired","getAnyCountry","_value","onPhoneDigitsChange","getFirstSupportedCountry","stateUpdate","forceRerender","isFocused","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","_this$props3","_international","_addInternationalOption","displayInitialValueAsLocalNumber","initialValueFormat","_this$props4","_defaultCountry","_countries","preSelectedCountry","getPreSelectedCountry","subClass","superClass","_inherits","prevProps","newDefaultCountry","newReset","prevDefaultCountry","prevValue","prevReset","_getInitialPhoneDigits","parameters","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","parsedCountry","hasUserSelectedACountryUpdate","supportedCountries","getPhoneInputWithCountryStateUpdateFromNewProps","selectedCountry","prevState","generator","dependencies","_this$props5","countryOptionsOrder","order","optionsOnTop","optionsOnBottom","appendTo","divider","option","splice","sortCountryOptions","countryNames","compareStringsLocales","_compareStrings","countrySelectOptions","unshift","ZZ","_getCountrySelectOptions","countryOptions","getSupportedCountryOptions","areEqualArrays","getCountrySelectOptions","_this$props6","disabled","autoComplete","style","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","PhoneInput--focus","aria-label","onCountryFocus","onCountryBlur","iconComponent","setInputRef","PureComponent","PhoneNumberInput","formatPhoneNumber","formatPhoneNumberIntl","oneOf","arrayOf","labelsPropType","oneOfType","metadataPropType","any","getRegionalIndicatorSymbol","letter","fromCodePoint","toUpperCase","charCodeAt","CountrySelect","onChange_","useMemo","getSelectedOption","DIVIDER_STYLE","fontSize","backgroundColor","color","CountrySelectWithIcon","Icon","Arrow","getIconAspectRatio","arrowComponent","unicodeFlags","selectedOption","getUnicodeFlagIcon","createPhoneInput","PhoneInputDefault","PhoneInput","_arguments","_formatPhoneNumber","_formatPhoneNumberIntl","_getCountries","_getCountryCallingCode","_isPossiblePhoneNumber","_isSupportedCountry","_isValidPhoneNumber"],"mappings":"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"}